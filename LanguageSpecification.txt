1. Data Types

int_32 - a simple 32 bits integer
char - a simple character

Def var:
Example:
int_32 a;

Def array:
Example:
int_32 a[10];

The max size of array can by 1000

All variables can be declared anywhere in the program.
Variables not in the same scope can have the same name
Var can be accessed in his scope and in any other child scope(scope inside the scope).

Assignment:
Example:
a = 10;
a[3] = 10;

Assign the var value

2. Expression -
Example:
a + 5 * 6

Expression operator expression or number

3. Condition -
Example a < b || b < a

Condition operator condition

4. While Loop -
Example:
while(a < 10)
{
    a = a + 1
}
While the condition is True execute all the commends in the scope


5. if/if - else statements -
Example:
if(a < 10)
{
    @print "good";
}
else
{
    @print "bad";
}

If the condition is True execute the code in the first scope.
Else if there is an else statement execute the code in the second scope.

6. print var
Example:
@print a;

Print's a variable value to the standard output

7. print string
Example:
@print "hello world\n";

Print's a string to the standard output

7. print array:
Example:
@print_array a;

Print's the array as a string

8. read line
Example:
@read_line a;

Reads user input into an array

8. exit statement
Example:
@exit -1

Exit the program with the specified exit code

9. define function
Example:
void a(char a)
{
    @print a;
}

Defines a function the can receive values, return value and execute code.

10. function return type
void - return nothing
every data type

11. function call
Example:
int_32 a = mul(10, 20);

Calls a defined function, if the function returns a value the functions call is treated like a regular value

12. @assert condition
Examples:
@assert a < 5;
@assert a == b;

Assert is an integrated macro that fails the program is the given condition fails