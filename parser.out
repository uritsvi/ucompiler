Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    new_line

Grammar

Rule 0     S' -> program
Rule 1     program -> function_impl
Rule 2     program -> program function_impl
Rule 3     return_statement -> return return_value
Rule 4     assert_statement -> assert value comma value
Rule 5     return_value -> value
Rule 6     return_value -> <empty>
Rule 7     function_impl_parameters -> <empty>
Rule 8     function_impl_parameters -> data_type new_function_parameter_name
Rule 9     function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name
Rule 10    function_prototype_start -> function_ret_type function_name
Rule 11    function_prototype -> function_prototype_start open_parenthesise function_impl_parameters close_parenthesise
Rule 12    function_call_parameters -> <empty>
Rule 13    function_call_parameters -> value
Rule 14    function_call_parameters -> function_call_parameters comma value
Rule 15    function_call -> function_name open_parenthesise function_call_parameters close_parenthesise
Rule 16    function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets
Rule 17    function_ret_type -> data_type
Rule 18    function_ret_type -> void_keyword
Rule 19    code_block -> statement
Rule 20    code_block -> code_block statement
Rule 21    code_block -> <empty>
Rule 22    statement -> basic_block_command semicolon
Rule 23    statement -> block
Rule 24    basic_block_command -> def_var
Rule 25    basic_block_command -> def_array
Rule 26    basic_block_command -> int_assignment
Rule 27    basic_block_command -> print_statement
Rule 28    basic_block_command -> read_line_statement
Rule 29    basic_block_command -> exit_statement
Rule 30    basic_block_command -> function_call
Rule 31    basic_block_command -> return_statement
Rule 32    basic_block_command -> assert_statement
Rule 33    block -> if_statement
Rule 34    block -> while_statement
Rule 35    scope_start -> open_curly_brackets
Rule 36    scope_end -> close_curly_brackets
Rule 37    scope -> scope_start code_block scope_end
Rule 38    condition -> simple_condition
Rule 39    condition -> complex_condition
Rule 40    simple_condition -> les_condition
Rule 41    simple_condition -> grater_condition
Rule 42    simple_condition -> equality_condition
Rule 43    simple_condition -> not_equals_condition
Rule 44    simple_condition -> condition_in_parenthesise
Rule 45    complex_condition -> and_condition
Rule 46    complex_condition -> or_condition
Rule 47    or_condition -> condition or_operator simple_condition
Rule 48    and_condition -> condition and_operator simple_condition
Rule 49    condition_in_parenthesise -> open_parenthesise condition close_parenthesise
Rule 50    les_condition -> expression less_operator expression
Rule 51    grater_condition -> expression greater_operator expression
Rule 52    equality_condition -> expression equality_operator expression
Rule 53    not_equals_condition -> expression not_equals_operator expression
Rule 54    if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement
Rule 55    if_statement -> if_keyword open_parenthesise condition close_parenthesise scope
Rule 56    else_statement -> else_keyword scope
Rule 57    while_statement -> while_keyword open_parenthesise condition close_parenthesise scope
Rule 58    data_type -> int_32_keyword
Rule 59    data_type -> char_keyword
Rule 60    def_var -> data_type new_var_name
Rule 61    def_var -> data_type new_var_name equals_operator value
Rule 62    def_array -> data_type new_var_name open_brackets simple_int_value close_brackets
Rule 63    array_cell -> array_name open_brackets value close_brackets
Rule 64    int_assignment -> dest_var equals_operator value
Rule 65    simple_int_value -> int_32_value
Rule 66    simple_int_value -> char_value
Rule 67    int_value -> int_expression
Rule 68    dest_var -> var_name
Rule 69    dest_var -> array_cell
Rule 70    value -> int_value
Rule 71    function_call_value -> function_call
Rule 72    int_expression -> simple_int_value
Rule 73    int_expression -> function_call_value
Rule 74    int_expression -> array_cell
Rule 75    int_expression -> int_expression_in_parenthesise
Rule 76    int_expression -> var_name
Rule 77    int_expression -> add_expression
Rule 78    int_expression -> sub_expression
Rule 79    int_expression -> mul_expression
Rule 80    int_expression -> dev_expression
Rule 81    int_expression -> dev_rest_expression
Rule 82    expression -> int_expression
Rule 83    int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise
Rule 84    add_expression -> expression add_operator expression
Rule 85    sub_expression -> expression sub_operator expression
Rule 86    mul_expression -> expression asterisk expression
Rule 87    dev_expression -> expression dev_operator expression
Rule 88    dev_rest_expression -> expression dev_rest_operator expression
Rule 89    var_name -> name
Rule 90    array_name -> name
Rule 91    new_function_parameter_name -> name
Rule 92    new_var_name -> name
Rule 93    function_name -> name
Rule 94    exit_statement -> exit int_expression
Rule 95    read_line_statement -> read_line array_name comma simple_int_value
Rule 96    print_statement -> print_value_statement
Rule 97    print_statement -> print_string_statement
Rule 98    print_statement -> print_array_statement
Rule 99    print_array_statement -> print_array array_name
Rule 100   print_value_statement -> print value
Rule 101   print_string_statement -> print string

Terminals, with rules where they appear

add_operator         : 84
and_operator         : 48
assert               : 4
asterisk             : 86
char_keyword         : 59
char_value           : 66
close_brackets       : 62 63
close_curly_brackets : 16 36
close_parenthesise   : 11 15 49 54 55 57 83
comma                : 4 9 14 95
dev_operator         : 87
dev_rest_operator    : 88
else_keyword         : 56
equality_operator    : 52
equals_operator      : 61 64
error                : 
exit                 : 94
greater_operator     : 51
if_keyword           : 54 55
int_32_keyword       : 58
int_32_value         : 65
less_operator        : 50
name                 : 89 90 91 92 93
new_line             : 
not_equals_operator  : 53
open_brackets        : 62 63
open_curly_brackets  : 16 35
open_parenthesise    : 11 15 49 54 55 57 83
or_operator          : 47
print                : 100 101
print_array          : 99
read_line            : 95
return               : 3
semicolon            : 22
string               : 101
sub_operator         : 85
void_keyword         : 18
while_keyword        : 57

Nonterminals, with rules where they appear

add_expression       : 77
and_condition        : 45
array_cell           : 69 74
array_name           : 63 95 99
assert_statement     : 32
basic_block_command  : 22
block                : 23
code_block           : 16 20 37
complex_condition    : 39
condition            : 47 48 49 54 55 57
condition_in_parenthesise : 44
data_type            : 8 9 17 60 61 62
def_array            : 25
def_var              : 24
dest_var             : 64
dev_expression       : 80
dev_rest_expression  : 81
else_statement       : 54
equality_condition   : 42
exit_statement       : 29
expression           : 50 50 51 51 52 52 53 53 84 84 85 85 86 86 87 87 88 88
function_call        : 30 71
function_call_parameters : 14 15
function_call_value  : 73
function_impl        : 1 2
function_impl_parameters : 9 11
function_name        : 10 15
function_prototype   : 16
function_prototype_start : 11
function_ret_type    : 10
grater_condition     : 41
if_statement         : 33
int_assignment       : 26
int_expression       : 67 82 83 94
int_expression_in_parenthesise : 75
int_value            : 70
les_condition        : 40
mul_expression       : 79
new_function_parameter_name : 8 9
new_var_name         : 60 61 62
not_equals_condition : 43
or_condition         : 46
print_array_statement : 98
print_statement      : 27
print_string_statement : 97
print_value_statement : 96
program              : 2 0
read_line_statement  : 28
return_statement     : 31
return_value         : 3
scope                : 54 55 56 57
scope_end            : 37
scope_start          : 37
simple_condition     : 38 47 48
simple_int_value     : 62 72 95
statement            : 19 20
sub_expression       : 78
value                : 4 4 5 13 14 61 63 64 100
var_name             : 68 76
while_statement      : 34

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_impl
    (2) program -> . program function_impl
    (16) function_impl -> . function_prototype open_curly_brackets code_block close_curly_brackets
    (11) function_prototype -> . function_prototype_start open_parenthesise function_impl_parameters close_parenthesise
    (10) function_prototype_start -> . function_ret_type function_name
    (17) function_ret_type -> . data_type
    (18) function_ret_type -> . void_keyword
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword

    void_keyword    shift and go to state 7
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    program                        shift and go to state 1
    function_impl                  shift and go to state 2
    function_prototype             shift and go to state 3
    function_prototype_start       shift and go to state 4
    function_ret_type              shift and go to state 5
    data_type                      shift and go to state 6

state 1

    (0) S' -> program .
    (2) program -> program . function_impl
    (16) function_impl -> . function_prototype open_curly_brackets code_block close_curly_brackets
    (11) function_prototype -> . function_prototype_start open_parenthesise function_impl_parameters close_parenthesise
    (10) function_prototype_start -> . function_ret_type function_name
    (17) function_ret_type -> . data_type
    (18) function_ret_type -> . void_keyword
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword

    void_keyword    shift and go to state 7
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    function_impl                  shift and go to state 10
    function_prototype             shift and go to state 3
    function_prototype_start       shift and go to state 4
    function_ret_type              shift and go to state 5
    data_type                      shift and go to state 6

state 2

    (1) program -> function_impl .

    void_keyword    reduce using rule 1 (program -> function_impl .)
    int_32_keyword  reduce using rule 1 (program -> function_impl .)
    char_keyword    reduce using rule 1 (program -> function_impl .)
    $end            reduce using rule 1 (program -> function_impl .)


state 3

    (16) function_impl -> function_prototype . open_curly_brackets code_block close_curly_brackets

    open_curly_brackets shift and go to state 11


state 4

    (11) function_prototype -> function_prototype_start . open_parenthesise function_impl_parameters close_parenthesise

    open_parenthesise shift and go to state 12


state 5

    (10) function_prototype_start -> function_ret_type . function_name
    (93) function_name -> . name

    name            shift and go to state 14

    function_name                  shift and go to state 13

state 6

    (17) function_ret_type -> data_type .

    name            reduce using rule 17 (function_ret_type -> data_type .)


state 7

    (18) function_ret_type -> void_keyword .

    name            reduce using rule 18 (function_ret_type -> void_keyword .)


state 8

    (58) data_type -> int_32_keyword .

    name            reduce using rule 58 (data_type -> int_32_keyword .)


state 9

    (59) data_type -> char_keyword .

    name            reduce using rule 59 (data_type -> char_keyword .)


state 10

    (2) program -> program function_impl .

    void_keyword    reduce using rule 2 (program -> program function_impl .)
    int_32_keyword  reduce using rule 2 (program -> program function_impl .)
    char_keyword    reduce using rule 2 (program -> program function_impl .)
    $end            reduce using rule 2 (program -> program function_impl .)


state 11

    (16) function_impl -> function_prototype open_curly_brackets . code_block close_curly_brackets
    (19) code_block -> . statement
    (20) code_block -> . code_block statement
    (21) code_block -> .
    (22) statement -> . basic_block_command semicolon
    (23) statement -> . block
    (24) basic_block_command -> . def_var
    (25) basic_block_command -> . def_array
    (26) basic_block_command -> . int_assignment
    (27) basic_block_command -> . print_statement
    (28) basic_block_command -> . read_line_statement
    (29) basic_block_command -> . exit_statement
    (30) basic_block_command -> . function_call
    (31) basic_block_command -> . return_statement
    (32) basic_block_command -> . assert_statement
    (33) block -> . if_statement
    (34) block -> . while_statement
    (60) def_var -> . data_type new_var_name
    (61) def_var -> . data_type new_var_name equals_operator value
    (62) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (64) int_assignment -> . dest_var equals_operator value
    (96) print_statement -> . print_value_statement
    (97) print_statement -> . print_string_statement
    (98) print_statement -> . print_array_statement
    (95) read_line_statement -> . read_line array_name comma simple_int_value
    (94) exit_statement -> . exit int_expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (4) assert_statement -> . assert value comma value
    (54) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (55) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (57) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword
    (68) dest_var -> . var_name
    (69) dest_var -> . array_cell
    (100) print_value_statement -> . print value
    (101) print_string_statement -> . print string
    (99) print_array_statement -> . print_array array_name
    (93) function_name -> . name
    (89) var_name -> . name
    (63) array_cell -> . array_name open_brackets value close_brackets
    (90) array_name -> . name

  ! shift/reduce conflict for read_line resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for assert resolved as shift
  ! shift/reduce conflict for if_keyword resolved as shift
  ! shift/reduce conflict for while_keyword resolved as shift
  ! shift/reduce conflict for int_32_keyword resolved as shift
  ! shift/reduce conflict for char_keyword resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for print_array resolved as shift
  ! shift/reduce conflict for name resolved as shift
    close_curly_brackets reduce using rule 21 (code_block -> .)
    read_line       shift and go to state 35
    exit            shift and go to state 37
    return          shift and go to state 39
    assert          shift and go to state 40
    if_keyword      shift and go to state 41
    while_keyword   shift and go to state 42
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 45
    print_array     shift and go to state 46
    name            shift and go to state 47

  ! read_line       [ reduce using rule 21 (code_block -> .) ]
  ! exit            [ reduce using rule 21 (code_block -> .) ]
  ! return          [ reduce using rule 21 (code_block -> .) ]
  ! assert          [ reduce using rule 21 (code_block -> .) ]
  ! if_keyword      [ reduce using rule 21 (code_block -> .) ]
  ! while_keyword   [ reduce using rule 21 (code_block -> .) ]
  ! int_32_keyword  [ reduce using rule 21 (code_block -> .) ]
  ! char_keyword    [ reduce using rule 21 (code_block -> .) ]
  ! print           [ reduce using rule 21 (code_block -> .) ]
  ! print_array     [ reduce using rule 21 (code_block -> .) ]
  ! name            [ reduce using rule 21 (code_block -> .) ]

    code_block                     shift and go to state 15
    statement                      shift and go to state 16
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    assert_statement               shift and go to state 27
    if_statement                   shift and go to state 28
    while_statement                shift and go to state 29
    data_type                      shift and go to state 30
    dest_var                       shift and go to state 31
    print_value_statement          shift and go to state 32
    print_string_statement         shift and go to state 33
    print_array_statement          shift and go to state 34
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38
    var_name                       shift and go to state 43
    array_cell                     shift and go to state 44

state 12

    (11) function_prototype -> function_prototype_start open_parenthesise . function_impl_parameters close_parenthesise
    (7) function_impl_parameters -> .
    (8) function_impl_parameters -> . data_type new_function_parameter_name
    (9) function_impl_parameters -> . function_impl_parameters comma data_type new_function_parameter_name
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword

    close_parenthesise reduce using rule 7 (function_impl_parameters -> .)
    comma           reduce using rule 7 (function_impl_parameters -> .)
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    function_impl_parameters       shift and go to state 48
    data_type                      shift and go to state 49

state 13

    (10) function_prototype_start -> function_ret_type function_name .

    open_parenthesise reduce using rule 10 (function_prototype_start -> function_ret_type function_name .)


state 14

    (93) function_name -> name .

    open_parenthesise reduce using rule 93 (function_name -> name .)


state 15

    (16) function_impl -> function_prototype open_curly_brackets code_block . close_curly_brackets
    (20) code_block -> code_block . statement
    (22) statement -> . basic_block_command semicolon
    (23) statement -> . block
    (24) basic_block_command -> . def_var
    (25) basic_block_command -> . def_array
    (26) basic_block_command -> . int_assignment
    (27) basic_block_command -> . print_statement
    (28) basic_block_command -> . read_line_statement
    (29) basic_block_command -> . exit_statement
    (30) basic_block_command -> . function_call
    (31) basic_block_command -> . return_statement
    (32) basic_block_command -> . assert_statement
    (33) block -> . if_statement
    (34) block -> . while_statement
    (60) def_var -> . data_type new_var_name
    (61) def_var -> . data_type new_var_name equals_operator value
    (62) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (64) int_assignment -> . dest_var equals_operator value
    (96) print_statement -> . print_value_statement
    (97) print_statement -> . print_string_statement
    (98) print_statement -> . print_array_statement
    (95) read_line_statement -> . read_line array_name comma simple_int_value
    (94) exit_statement -> . exit int_expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (4) assert_statement -> . assert value comma value
    (54) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (55) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (57) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword
    (68) dest_var -> . var_name
    (69) dest_var -> . array_cell
    (100) print_value_statement -> . print value
    (101) print_string_statement -> . print string
    (99) print_array_statement -> . print_array array_name
    (93) function_name -> . name
    (89) var_name -> . name
    (63) array_cell -> . array_name open_brackets value close_brackets
    (90) array_name -> . name

    close_curly_brackets shift and go to state 50
    read_line       shift and go to state 35
    exit            shift and go to state 37
    return          shift and go to state 39
    assert          shift and go to state 40
    if_keyword      shift and go to state 41
    while_keyword   shift and go to state 42
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 45
    print_array     shift and go to state 46
    name            shift and go to state 47

    statement                      shift and go to state 51
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    assert_statement               shift and go to state 27
    if_statement                   shift and go to state 28
    while_statement                shift and go to state 29
    data_type                      shift and go to state 30
    dest_var                       shift and go to state 31
    print_value_statement          shift and go to state 32
    print_string_statement         shift and go to state 33
    print_array_statement          shift and go to state 34
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38
    var_name                       shift and go to state 43
    array_cell                     shift and go to state 44

state 16

    (19) code_block -> statement .

    close_curly_brackets reduce using rule 19 (code_block -> statement .)
    read_line       reduce using rule 19 (code_block -> statement .)
    exit            reduce using rule 19 (code_block -> statement .)
    return          reduce using rule 19 (code_block -> statement .)
    assert          reduce using rule 19 (code_block -> statement .)
    if_keyword      reduce using rule 19 (code_block -> statement .)
    while_keyword   reduce using rule 19 (code_block -> statement .)
    int_32_keyword  reduce using rule 19 (code_block -> statement .)
    char_keyword    reduce using rule 19 (code_block -> statement .)
    print           reduce using rule 19 (code_block -> statement .)
    print_array     reduce using rule 19 (code_block -> statement .)
    name            reduce using rule 19 (code_block -> statement .)


state 17

    (22) statement -> basic_block_command . semicolon

    semicolon       shift and go to state 52


state 18

    (23) statement -> block .

    close_curly_brackets reduce using rule 23 (statement -> block .)
    read_line       reduce using rule 23 (statement -> block .)
    exit            reduce using rule 23 (statement -> block .)
    return          reduce using rule 23 (statement -> block .)
    assert          reduce using rule 23 (statement -> block .)
    if_keyword      reduce using rule 23 (statement -> block .)
    while_keyword   reduce using rule 23 (statement -> block .)
    int_32_keyword  reduce using rule 23 (statement -> block .)
    char_keyword    reduce using rule 23 (statement -> block .)
    print           reduce using rule 23 (statement -> block .)
    print_array     reduce using rule 23 (statement -> block .)
    name            reduce using rule 23 (statement -> block .)


state 19

    (24) basic_block_command -> def_var .

    semicolon       reduce using rule 24 (basic_block_command -> def_var .)


state 20

    (25) basic_block_command -> def_array .

    semicolon       reduce using rule 25 (basic_block_command -> def_array .)


state 21

    (26) basic_block_command -> int_assignment .

    semicolon       reduce using rule 26 (basic_block_command -> int_assignment .)


state 22

    (27) basic_block_command -> print_statement .

    semicolon       reduce using rule 27 (basic_block_command -> print_statement .)


state 23

    (28) basic_block_command -> read_line_statement .

    semicolon       reduce using rule 28 (basic_block_command -> read_line_statement .)


state 24

    (29) basic_block_command -> exit_statement .

    semicolon       reduce using rule 29 (basic_block_command -> exit_statement .)


state 25

    (30) basic_block_command -> function_call .

    semicolon       reduce using rule 30 (basic_block_command -> function_call .)


state 26

    (31) basic_block_command -> return_statement .

    semicolon       reduce using rule 31 (basic_block_command -> return_statement .)


state 27

    (32) basic_block_command -> assert_statement .

    semicolon       reduce using rule 32 (basic_block_command -> assert_statement .)


state 28

    (33) block -> if_statement .

    close_curly_brackets reduce using rule 33 (block -> if_statement .)
    read_line       reduce using rule 33 (block -> if_statement .)
    exit            reduce using rule 33 (block -> if_statement .)
    return          reduce using rule 33 (block -> if_statement .)
    assert          reduce using rule 33 (block -> if_statement .)
    if_keyword      reduce using rule 33 (block -> if_statement .)
    while_keyword   reduce using rule 33 (block -> if_statement .)
    int_32_keyword  reduce using rule 33 (block -> if_statement .)
    char_keyword    reduce using rule 33 (block -> if_statement .)
    print           reduce using rule 33 (block -> if_statement .)
    print_array     reduce using rule 33 (block -> if_statement .)
    name            reduce using rule 33 (block -> if_statement .)


state 29

    (34) block -> while_statement .

    close_curly_brackets reduce using rule 34 (block -> while_statement .)
    read_line       reduce using rule 34 (block -> while_statement .)
    exit            reduce using rule 34 (block -> while_statement .)
    return          reduce using rule 34 (block -> while_statement .)
    assert          reduce using rule 34 (block -> while_statement .)
    if_keyword      reduce using rule 34 (block -> while_statement .)
    while_keyword   reduce using rule 34 (block -> while_statement .)
    int_32_keyword  reduce using rule 34 (block -> while_statement .)
    char_keyword    reduce using rule 34 (block -> while_statement .)
    print           reduce using rule 34 (block -> while_statement .)
    print_array     reduce using rule 34 (block -> while_statement .)
    name            reduce using rule 34 (block -> while_statement .)


state 30

    (60) def_var -> data_type . new_var_name
    (61) def_var -> data_type . new_var_name equals_operator value
    (62) def_array -> data_type . new_var_name open_brackets simple_int_value close_brackets
    (92) new_var_name -> . name

    name            shift and go to state 54

    new_var_name                   shift and go to state 53

state 31

    (64) int_assignment -> dest_var . equals_operator value

    equals_operator shift and go to state 55


state 32

    (96) print_statement -> print_value_statement .

    semicolon       reduce using rule 96 (print_statement -> print_value_statement .)


state 33

    (97) print_statement -> print_string_statement .

    semicolon       reduce using rule 97 (print_statement -> print_string_statement .)


state 34

    (98) print_statement -> print_array_statement .

    semicolon       reduce using rule 98 (print_statement -> print_array_statement .)


state 35

    (95) read_line_statement -> read_line . array_name comma simple_int_value
    (90) array_name -> . name

    name            shift and go to state 57

    array_name                     shift and go to state 56

state 36

    (63) array_cell -> array_name . open_brackets value close_brackets

    open_brackets   shift and go to state 58


state 37

    (94) exit_statement -> exit . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    int_expression                 shift and go to state 59
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 38

    (15) function_call -> function_name . open_parenthesise function_call_parameters close_parenthesise

    open_parenthesise shift and go to state 76


state 39

    (3) return_statement -> return . return_value
    (5) return_value -> . value
    (6) return_value -> .
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    semicolon       reduce using rule 6 (return_value -> .)
    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    return_value                   shift and go to state 77
    value                          shift and go to state 78
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 40

    (4) assert_statement -> assert . value comma value
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    value                          shift and go to state 81
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 41

    (54) if_statement -> if_keyword . open_parenthesise condition close_parenthesise scope else_statement
    (55) if_statement -> if_keyword . open_parenthesise condition close_parenthesise scope

    open_parenthesise shift and go to state 82


state 42

    (57) while_statement -> while_keyword . open_parenthesise condition close_parenthesise scope

    open_parenthesise shift and go to state 83


state 43

    (68) dest_var -> var_name .

    equals_operator reduce using rule 68 (dest_var -> var_name .)


state 44

    (69) dest_var -> array_cell .

    equals_operator reduce using rule 69 (dest_var -> array_cell .)


state 45

    (100) print_value_statement -> print . value
    (101) print_string_statement -> print . string
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    string          shift and go to state 85
    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    value                          shift and go to state 84
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 46

    (99) print_array_statement -> print_array . array_name
    (90) array_name -> . name

    name            shift and go to state 57

    array_name                     shift and go to state 86

state 47

    (93) function_name -> name .
    (89) var_name -> name .
    (90) array_name -> name .

    open_parenthesise reduce using rule 93 (function_name -> name .)
    equals_operator reduce using rule 89 (var_name -> name .)
    open_brackets   reduce using rule 90 (array_name -> name .)


state 48

    (11) function_prototype -> function_prototype_start open_parenthesise function_impl_parameters . close_parenthesise
    (9) function_impl_parameters -> function_impl_parameters . comma data_type new_function_parameter_name

    close_parenthesise shift and go to state 87
    comma           shift and go to state 88


state 49

    (8) function_impl_parameters -> data_type . new_function_parameter_name
    (91) new_function_parameter_name -> . name

    name            shift and go to state 90

    new_function_parameter_name    shift and go to state 89

state 50

    (16) function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .

    void_keyword    reduce using rule 16 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)
    int_32_keyword  reduce using rule 16 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)
    char_keyword    reduce using rule 16 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)
    $end            reduce using rule 16 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)


state 51

    (20) code_block -> code_block statement .

    close_curly_brackets reduce using rule 20 (code_block -> code_block statement .)
    read_line       reduce using rule 20 (code_block -> code_block statement .)
    exit            reduce using rule 20 (code_block -> code_block statement .)
    return          reduce using rule 20 (code_block -> code_block statement .)
    assert          reduce using rule 20 (code_block -> code_block statement .)
    if_keyword      reduce using rule 20 (code_block -> code_block statement .)
    while_keyword   reduce using rule 20 (code_block -> code_block statement .)
    int_32_keyword  reduce using rule 20 (code_block -> code_block statement .)
    char_keyword    reduce using rule 20 (code_block -> code_block statement .)
    print           reduce using rule 20 (code_block -> code_block statement .)
    print_array     reduce using rule 20 (code_block -> code_block statement .)
    name            reduce using rule 20 (code_block -> code_block statement .)


state 52

    (22) statement -> basic_block_command semicolon .

    close_curly_brackets reduce using rule 22 (statement -> basic_block_command semicolon .)
    read_line       reduce using rule 22 (statement -> basic_block_command semicolon .)
    exit            reduce using rule 22 (statement -> basic_block_command semicolon .)
    return          reduce using rule 22 (statement -> basic_block_command semicolon .)
    assert          reduce using rule 22 (statement -> basic_block_command semicolon .)
    if_keyword      reduce using rule 22 (statement -> basic_block_command semicolon .)
    while_keyword   reduce using rule 22 (statement -> basic_block_command semicolon .)
    int_32_keyword  reduce using rule 22 (statement -> basic_block_command semicolon .)
    char_keyword    reduce using rule 22 (statement -> basic_block_command semicolon .)
    print           reduce using rule 22 (statement -> basic_block_command semicolon .)
    print_array     reduce using rule 22 (statement -> basic_block_command semicolon .)
    name            reduce using rule 22 (statement -> basic_block_command semicolon .)


state 53

    (60) def_var -> data_type new_var_name .
    (61) def_var -> data_type new_var_name . equals_operator value
    (62) def_array -> data_type new_var_name . open_brackets simple_int_value close_brackets

    semicolon       reduce using rule 60 (def_var -> data_type new_var_name .)
    equals_operator shift and go to state 91
    open_brackets   shift and go to state 92


state 54

    (92) new_var_name -> name .

    equals_operator reduce using rule 92 (new_var_name -> name .)
    open_brackets   reduce using rule 92 (new_var_name -> name .)
    semicolon       reduce using rule 92 (new_var_name -> name .)


state 55

    (64) int_assignment -> dest_var equals_operator . value
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    value                          shift and go to state 93
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 56

    (95) read_line_statement -> read_line array_name . comma simple_int_value

    comma           shift and go to state 94


state 57

    (90) array_name -> name .

    comma           reduce using rule 90 (array_name -> name .)
    semicolon       reduce using rule 90 (array_name -> name .)


state 58

    (63) array_cell -> array_name open_brackets . value close_brackets
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    array_name                     shift and go to state 36
    value                          shift and go to state 95
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 59

    (94) exit_statement -> exit int_expression .
    (82) expression -> int_expression .

    semicolon       reduce using rule 94 (exit_statement -> exit int_expression .)
    add_operator    reduce using rule 82 (expression -> int_expression .)
    sub_operator    reduce using rule 82 (expression -> int_expression .)
    asterisk        reduce using rule 82 (expression -> int_expression .)
    dev_operator    reduce using rule 82 (expression -> int_expression .)
    dev_rest_operator reduce using rule 82 (expression -> int_expression .)


state 60

    (72) int_expression -> simple_int_value .

    semicolon       reduce using rule 72 (int_expression -> simple_int_value .)
    add_operator    reduce using rule 72 (int_expression -> simple_int_value .)
    sub_operator    reduce using rule 72 (int_expression -> simple_int_value .)
    asterisk        reduce using rule 72 (int_expression -> simple_int_value .)
    dev_operator    reduce using rule 72 (int_expression -> simple_int_value .)
    dev_rest_operator reduce using rule 72 (int_expression -> simple_int_value .)
    comma           reduce using rule 72 (int_expression -> simple_int_value .)
    close_brackets  reduce using rule 72 (int_expression -> simple_int_value .)
    close_parenthesise reduce using rule 72 (int_expression -> simple_int_value .)
    less_operator   reduce using rule 72 (int_expression -> simple_int_value .)
    greater_operator reduce using rule 72 (int_expression -> simple_int_value .)
    equality_operator reduce using rule 72 (int_expression -> simple_int_value .)
    not_equals_operator reduce using rule 72 (int_expression -> simple_int_value .)
    and_operator    reduce using rule 72 (int_expression -> simple_int_value .)
    or_operator     reduce using rule 72 (int_expression -> simple_int_value .)


state 61

    (73) int_expression -> function_call_value .

    semicolon       reduce using rule 73 (int_expression -> function_call_value .)
    add_operator    reduce using rule 73 (int_expression -> function_call_value .)
    sub_operator    reduce using rule 73 (int_expression -> function_call_value .)
    asterisk        reduce using rule 73 (int_expression -> function_call_value .)
    dev_operator    reduce using rule 73 (int_expression -> function_call_value .)
    dev_rest_operator reduce using rule 73 (int_expression -> function_call_value .)
    comma           reduce using rule 73 (int_expression -> function_call_value .)
    close_brackets  reduce using rule 73 (int_expression -> function_call_value .)
    close_parenthesise reduce using rule 73 (int_expression -> function_call_value .)
    less_operator   reduce using rule 73 (int_expression -> function_call_value .)
    greater_operator reduce using rule 73 (int_expression -> function_call_value .)
    equality_operator reduce using rule 73 (int_expression -> function_call_value .)
    not_equals_operator reduce using rule 73 (int_expression -> function_call_value .)
    and_operator    reduce using rule 73 (int_expression -> function_call_value .)
    or_operator     reduce using rule 73 (int_expression -> function_call_value .)


state 62

    (74) int_expression -> array_cell .

    semicolon       reduce using rule 74 (int_expression -> array_cell .)
    add_operator    reduce using rule 74 (int_expression -> array_cell .)
    sub_operator    reduce using rule 74 (int_expression -> array_cell .)
    asterisk        reduce using rule 74 (int_expression -> array_cell .)
    dev_operator    reduce using rule 74 (int_expression -> array_cell .)
    dev_rest_operator reduce using rule 74 (int_expression -> array_cell .)
    comma           reduce using rule 74 (int_expression -> array_cell .)
    close_brackets  reduce using rule 74 (int_expression -> array_cell .)
    close_parenthesise reduce using rule 74 (int_expression -> array_cell .)
    less_operator   reduce using rule 74 (int_expression -> array_cell .)
    greater_operator reduce using rule 74 (int_expression -> array_cell .)
    equality_operator reduce using rule 74 (int_expression -> array_cell .)
    not_equals_operator reduce using rule 74 (int_expression -> array_cell .)
    and_operator    reduce using rule 74 (int_expression -> array_cell .)
    or_operator     reduce using rule 74 (int_expression -> array_cell .)


state 63

    (75) int_expression -> int_expression_in_parenthesise .

    semicolon       reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    add_operator    reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    sub_operator    reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    asterisk        reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    dev_operator    reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    dev_rest_operator reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    comma           reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    close_brackets  reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    close_parenthesise reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    less_operator   reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    greater_operator reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    equality_operator reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    not_equals_operator reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    and_operator    reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)
    or_operator     reduce using rule 75 (int_expression -> int_expression_in_parenthesise .)


state 64

    (76) int_expression -> var_name .

    semicolon       reduce using rule 76 (int_expression -> var_name .)
    add_operator    reduce using rule 76 (int_expression -> var_name .)
    sub_operator    reduce using rule 76 (int_expression -> var_name .)
    asterisk        reduce using rule 76 (int_expression -> var_name .)
    dev_operator    reduce using rule 76 (int_expression -> var_name .)
    dev_rest_operator reduce using rule 76 (int_expression -> var_name .)
    comma           reduce using rule 76 (int_expression -> var_name .)
    close_brackets  reduce using rule 76 (int_expression -> var_name .)
    close_parenthesise reduce using rule 76 (int_expression -> var_name .)
    less_operator   reduce using rule 76 (int_expression -> var_name .)
    greater_operator reduce using rule 76 (int_expression -> var_name .)
    equality_operator reduce using rule 76 (int_expression -> var_name .)
    not_equals_operator reduce using rule 76 (int_expression -> var_name .)
    and_operator    reduce using rule 76 (int_expression -> var_name .)
    or_operator     reduce using rule 76 (int_expression -> var_name .)


state 65

    (77) int_expression -> add_expression .

    semicolon       reduce using rule 77 (int_expression -> add_expression .)
    add_operator    reduce using rule 77 (int_expression -> add_expression .)
    sub_operator    reduce using rule 77 (int_expression -> add_expression .)
    asterisk        reduce using rule 77 (int_expression -> add_expression .)
    dev_operator    reduce using rule 77 (int_expression -> add_expression .)
    dev_rest_operator reduce using rule 77 (int_expression -> add_expression .)
    comma           reduce using rule 77 (int_expression -> add_expression .)
    close_brackets  reduce using rule 77 (int_expression -> add_expression .)
    close_parenthesise reduce using rule 77 (int_expression -> add_expression .)
    less_operator   reduce using rule 77 (int_expression -> add_expression .)
    greater_operator reduce using rule 77 (int_expression -> add_expression .)
    equality_operator reduce using rule 77 (int_expression -> add_expression .)
    not_equals_operator reduce using rule 77 (int_expression -> add_expression .)
    and_operator    reduce using rule 77 (int_expression -> add_expression .)
    or_operator     reduce using rule 77 (int_expression -> add_expression .)


state 66

    (78) int_expression -> sub_expression .

    semicolon       reduce using rule 78 (int_expression -> sub_expression .)
    add_operator    reduce using rule 78 (int_expression -> sub_expression .)
    sub_operator    reduce using rule 78 (int_expression -> sub_expression .)
    asterisk        reduce using rule 78 (int_expression -> sub_expression .)
    dev_operator    reduce using rule 78 (int_expression -> sub_expression .)
    dev_rest_operator reduce using rule 78 (int_expression -> sub_expression .)
    comma           reduce using rule 78 (int_expression -> sub_expression .)
    close_brackets  reduce using rule 78 (int_expression -> sub_expression .)
    close_parenthesise reduce using rule 78 (int_expression -> sub_expression .)
    less_operator   reduce using rule 78 (int_expression -> sub_expression .)
    greater_operator reduce using rule 78 (int_expression -> sub_expression .)
    equality_operator reduce using rule 78 (int_expression -> sub_expression .)
    not_equals_operator reduce using rule 78 (int_expression -> sub_expression .)
    and_operator    reduce using rule 78 (int_expression -> sub_expression .)
    or_operator     reduce using rule 78 (int_expression -> sub_expression .)


state 67

    (79) int_expression -> mul_expression .

    semicolon       reduce using rule 79 (int_expression -> mul_expression .)
    add_operator    reduce using rule 79 (int_expression -> mul_expression .)
    sub_operator    reduce using rule 79 (int_expression -> mul_expression .)
    asterisk        reduce using rule 79 (int_expression -> mul_expression .)
    dev_operator    reduce using rule 79 (int_expression -> mul_expression .)
    dev_rest_operator reduce using rule 79 (int_expression -> mul_expression .)
    comma           reduce using rule 79 (int_expression -> mul_expression .)
    close_brackets  reduce using rule 79 (int_expression -> mul_expression .)
    close_parenthesise reduce using rule 79 (int_expression -> mul_expression .)
    less_operator   reduce using rule 79 (int_expression -> mul_expression .)
    greater_operator reduce using rule 79 (int_expression -> mul_expression .)
    equality_operator reduce using rule 79 (int_expression -> mul_expression .)
    not_equals_operator reduce using rule 79 (int_expression -> mul_expression .)
    and_operator    reduce using rule 79 (int_expression -> mul_expression .)
    or_operator     reduce using rule 79 (int_expression -> mul_expression .)


state 68

    (80) int_expression -> dev_expression .

    semicolon       reduce using rule 80 (int_expression -> dev_expression .)
    add_operator    reduce using rule 80 (int_expression -> dev_expression .)
    sub_operator    reduce using rule 80 (int_expression -> dev_expression .)
    asterisk        reduce using rule 80 (int_expression -> dev_expression .)
    dev_operator    reduce using rule 80 (int_expression -> dev_expression .)
    dev_rest_operator reduce using rule 80 (int_expression -> dev_expression .)
    comma           reduce using rule 80 (int_expression -> dev_expression .)
    close_brackets  reduce using rule 80 (int_expression -> dev_expression .)
    close_parenthesise reduce using rule 80 (int_expression -> dev_expression .)
    less_operator   reduce using rule 80 (int_expression -> dev_expression .)
    greater_operator reduce using rule 80 (int_expression -> dev_expression .)
    equality_operator reduce using rule 80 (int_expression -> dev_expression .)
    not_equals_operator reduce using rule 80 (int_expression -> dev_expression .)
    and_operator    reduce using rule 80 (int_expression -> dev_expression .)
    or_operator     reduce using rule 80 (int_expression -> dev_expression .)


state 69

    (81) int_expression -> dev_rest_expression .

    semicolon       reduce using rule 81 (int_expression -> dev_rest_expression .)
    add_operator    reduce using rule 81 (int_expression -> dev_rest_expression .)
    sub_operator    reduce using rule 81 (int_expression -> dev_rest_expression .)
    asterisk        reduce using rule 81 (int_expression -> dev_rest_expression .)
    dev_operator    reduce using rule 81 (int_expression -> dev_rest_expression .)
    dev_rest_operator reduce using rule 81 (int_expression -> dev_rest_expression .)
    comma           reduce using rule 81 (int_expression -> dev_rest_expression .)
    close_brackets  reduce using rule 81 (int_expression -> dev_rest_expression .)
    close_parenthesise reduce using rule 81 (int_expression -> dev_rest_expression .)
    less_operator   reduce using rule 81 (int_expression -> dev_rest_expression .)
    greater_operator reduce using rule 81 (int_expression -> dev_rest_expression .)
    equality_operator reduce using rule 81 (int_expression -> dev_rest_expression .)
    not_equals_operator reduce using rule 81 (int_expression -> dev_rest_expression .)
    and_operator    reduce using rule 81 (int_expression -> dev_rest_expression .)
    or_operator     reduce using rule 81 (int_expression -> dev_rest_expression .)


state 70

    (65) simple_int_value -> int_32_value .

    semicolon       reduce using rule 65 (simple_int_value -> int_32_value .)
    add_operator    reduce using rule 65 (simple_int_value -> int_32_value .)
    sub_operator    reduce using rule 65 (simple_int_value -> int_32_value .)
    asterisk        reduce using rule 65 (simple_int_value -> int_32_value .)
    dev_operator    reduce using rule 65 (simple_int_value -> int_32_value .)
    dev_rest_operator reduce using rule 65 (simple_int_value -> int_32_value .)
    comma           reduce using rule 65 (simple_int_value -> int_32_value .)
    close_brackets  reduce using rule 65 (simple_int_value -> int_32_value .)
    close_parenthesise reduce using rule 65 (simple_int_value -> int_32_value .)
    less_operator   reduce using rule 65 (simple_int_value -> int_32_value .)
    greater_operator reduce using rule 65 (simple_int_value -> int_32_value .)
    equality_operator reduce using rule 65 (simple_int_value -> int_32_value .)
    not_equals_operator reduce using rule 65 (simple_int_value -> int_32_value .)
    and_operator    reduce using rule 65 (simple_int_value -> int_32_value .)
    or_operator     reduce using rule 65 (simple_int_value -> int_32_value .)


state 71

    (66) simple_int_value -> char_value .

    semicolon       reduce using rule 66 (simple_int_value -> char_value .)
    add_operator    reduce using rule 66 (simple_int_value -> char_value .)
    sub_operator    reduce using rule 66 (simple_int_value -> char_value .)
    asterisk        reduce using rule 66 (simple_int_value -> char_value .)
    dev_operator    reduce using rule 66 (simple_int_value -> char_value .)
    dev_rest_operator reduce using rule 66 (simple_int_value -> char_value .)
    comma           reduce using rule 66 (simple_int_value -> char_value .)
    close_brackets  reduce using rule 66 (simple_int_value -> char_value .)
    close_parenthesise reduce using rule 66 (simple_int_value -> char_value .)
    less_operator   reduce using rule 66 (simple_int_value -> char_value .)
    greater_operator reduce using rule 66 (simple_int_value -> char_value .)
    equality_operator reduce using rule 66 (simple_int_value -> char_value .)
    not_equals_operator reduce using rule 66 (simple_int_value -> char_value .)
    and_operator    reduce using rule 66 (simple_int_value -> char_value .)
    or_operator     reduce using rule 66 (simple_int_value -> char_value .)


state 72

    (71) function_call_value -> function_call .

    semicolon       reduce using rule 71 (function_call_value -> function_call .)
    add_operator    reduce using rule 71 (function_call_value -> function_call .)
    sub_operator    reduce using rule 71 (function_call_value -> function_call .)
    asterisk        reduce using rule 71 (function_call_value -> function_call .)
    dev_operator    reduce using rule 71 (function_call_value -> function_call .)
    dev_rest_operator reduce using rule 71 (function_call_value -> function_call .)
    comma           reduce using rule 71 (function_call_value -> function_call .)
    close_brackets  reduce using rule 71 (function_call_value -> function_call .)
    close_parenthesise reduce using rule 71 (function_call_value -> function_call .)
    less_operator   reduce using rule 71 (function_call_value -> function_call .)
    greater_operator reduce using rule 71 (function_call_value -> function_call .)
    equality_operator reduce using rule 71 (function_call_value -> function_call .)
    not_equals_operator reduce using rule 71 (function_call_value -> function_call .)
    and_operator    reduce using rule 71 (function_call_value -> function_call .)
    or_operator     reduce using rule 71 (function_call_value -> function_call .)


state 73

    (83) int_expression_in_parenthesise -> open_parenthesise . int_expression close_parenthesise
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    int_expression                 shift and go to state 96
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 74

    (89) var_name -> name .
    (90) array_name -> name .
    (93) function_name -> name .

    semicolon       reduce using rule 89 (var_name -> name .)
    add_operator    reduce using rule 89 (var_name -> name .)
    sub_operator    reduce using rule 89 (var_name -> name .)
    asterisk        reduce using rule 89 (var_name -> name .)
    dev_operator    reduce using rule 89 (var_name -> name .)
    dev_rest_operator reduce using rule 89 (var_name -> name .)
    comma           reduce using rule 89 (var_name -> name .)
    close_brackets  reduce using rule 89 (var_name -> name .)
    close_parenthesise reduce using rule 89 (var_name -> name .)
    less_operator   reduce using rule 89 (var_name -> name .)
    greater_operator reduce using rule 89 (var_name -> name .)
    equality_operator reduce using rule 89 (var_name -> name .)
    not_equals_operator reduce using rule 89 (var_name -> name .)
    and_operator    reduce using rule 89 (var_name -> name .)
    or_operator     reduce using rule 89 (var_name -> name .)
    open_brackets   reduce using rule 90 (array_name -> name .)
    open_parenthesise reduce using rule 93 (function_name -> name .)


state 75

    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    add_operator    shift and go to state 97
    sub_operator    shift and go to state 98
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101


state 76

    (15) function_call -> function_name open_parenthesise . function_call_parameters close_parenthesise
    (12) function_call_parameters -> .
    (13) function_call_parameters -> . value
    (14) function_call_parameters -> . function_call_parameters comma value
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    close_parenthesise reduce using rule 12 (function_call_parameters -> .)
    comma           reduce using rule 12 (function_call_parameters -> .)
    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    function_name                  shift and go to state 38
    function_call_parameters       shift and go to state 102
    value                          shift and go to state 103
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75

state 77

    (3) return_statement -> return return_value .

    semicolon       reduce using rule 3 (return_statement -> return return_value .)


state 78

    (5) return_value -> value .

    semicolon       reduce using rule 5 (return_value -> value .)


state 79

    (70) value -> int_value .

    semicolon       reduce using rule 70 (value -> int_value .)
    comma           reduce using rule 70 (value -> int_value .)
    close_brackets  reduce using rule 70 (value -> int_value .)
    close_parenthesise reduce using rule 70 (value -> int_value .)


state 80

    (67) int_value -> int_expression .
    (82) expression -> int_expression .

    semicolon       reduce using rule 67 (int_value -> int_expression .)
    comma           reduce using rule 67 (int_value -> int_expression .)
    close_brackets  reduce using rule 67 (int_value -> int_expression .)
    close_parenthesise reduce using rule 67 (int_value -> int_expression .)
    add_operator    reduce using rule 82 (expression -> int_expression .)
    sub_operator    reduce using rule 82 (expression -> int_expression .)
    asterisk        reduce using rule 82 (expression -> int_expression .)
    dev_operator    reduce using rule 82 (expression -> int_expression .)
    dev_rest_operator reduce using rule 82 (expression -> int_expression .)


state 81

    (4) assert_statement -> assert value . comma value

    comma           shift and go to state 104


state 82

    (54) if_statement -> if_keyword open_parenthesise . condition close_parenthesise scope else_statement
    (55) if_statement -> if_keyword open_parenthesise . condition close_parenthesise scope
    (38) condition -> . simple_condition
    (39) condition -> . complex_condition
    (40) simple_condition -> . les_condition
    (41) simple_condition -> . grater_condition
    (42) simple_condition -> . equality_condition
    (43) simple_condition -> . not_equals_condition
    (44) simple_condition -> . condition_in_parenthesise
    (45) complex_condition -> . and_condition
    (46) complex_condition -> . or_condition
    (50) les_condition -> . expression less_operator expression
    (51) grater_condition -> . expression greater_operator expression
    (52) equality_condition -> . expression equality_operator expression
    (53) not_equals_condition -> . expression not_equals_operator expression
    (49) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (48) and_condition -> . condition and_operator simple_condition
    (47) or_condition -> . condition or_operator simple_condition
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    open_parenthesise shift and go to state 105
    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    name            shift and go to state 74

    condition                      shift and go to state 106
    simple_condition               shift and go to state 107
    complex_condition              shift and go to state 108
    les_condition                  shift and go to state 109
    grater_condition               shift and go to state 110
    equality_condition             shift and go to state 111
    not_equals_condition           shift and go to state 112
    condition_in_parenthesise      shift and go to state 113
    and_condition                  shift and go to state 114
    or_condition                   shift and go to state 115
    expression                     shift and go to state 116
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 83

    (57) while_statement -> while_keyword open_parenthesise . condition close_parenthesise scope
    (38) condition -> . simple_condition
    (39) condition -> . complex_condition
    (40) simple_condition -> . les_condition
    (41) simple_condition -> . grater_condition
    (42) simple_condition -> . equality_condition
    (43) simple_condition -> . not_equals_condition
    (44) simple_condition -> . condition_in_parenthesise
    (45) complex_condition -> . and_condition
    (46) complex_condition -> . or_condition
    (50) les_condition -> . expression less_operator expression
    (51) grater_condition -> . expression greater_operator expression
    (52) equality_condition -> . expression equality_operator expression
    (53) not_equals_condition -> . expression not_equals_operator expression
    (49) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (48) and_condition -> . condition and_operator simple_condition
    (47) or_condition -> . condition or_operator simple_condition
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    open_parenthesise shift and go to state 105
    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    name            shift and go to state 74

    condition                      shift and go to state 118
    simple_condition               shift and go to state 107
    complex_condition              shift and go to state 108
    les_condition                  shift and go to state 109
    grater_condition               shift and go to state 110
    equality_condition             shift and go to state 111
    not_equals_condition           shift and go to state 112
    condition_in_parenthesise      shift and go to state 113
    and_condition                  shift and go to state 114
    or_condition                   shift and go to state 115
    expression                     shift and go to state 116
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 84

    (100) print_value_statement -> print value .

    semicolon       reduce using rule 100 (print_value_statement -> print value .)


state 85

    (101) print_string_statement -> print string .

    semicolon       reduce using rule 101 (print_string_statement -> print string .)


state 86

    (99) print_array_statement -> print_array array_name .

    semicolon       reduce using rule 99 (print_array_statement -> print_array array_name .)


state 87

    (11) function_prototype -> function_prototype_start open_parenthesise function_impl_parameters close_parenthesise .

    open_curly_brackets reduce using rule 11 (function_prototype -> function_prototype_start open_parenthesise function_impl_parameters close_parenthesise .)


state 88

    (9) function_impl_parameters -> function_impl_parameters comma . data_type new_function_parameter_name
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword

    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    data_type                      shift and go to state 119

state 89

    (8) function_impl_parameters -> data_type new_function_parameter_name .

    close_parenthesise reduce using rule 8 (function_impl_parameters -> data_type new_function_parameter_name .)
    comma           reduce using rule 8 (function_impl_parameters -> data_type new_function_parameter_name .)


state 90

    (91) new_function_parameter_name -> name .

    close_parenthesise reduce using rule 91 (new_function_parameter_name -> name .)
    comma           reduce using rule 91 (new_function_parameter_name -> name .)


state 91

    (61) def_var -> data_type new_var_name equals_operator . value
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    value                          shift and go to state 120
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 92

    (62) def_array -> data_type new_var_name open_brackets . simple_int_value close_brackets
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71

    simple_int_value               shift and go to state 121

state 93

    (64) int_assignment -> dest_var equals_operator value .

    semicolon       reduce using rule 64 (int_assignment -> dest_var equals_operator value .)


state 94

    (95) read_line_statement -> read_line array_name comma . simple_int_value
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71

    simple_int_value               shift and go to state 122

state 95

    (63) array_cell -> array_name open_brackets value . close_brackets

    close_brackets  shift and go to state 123


state 96

    (83) int_expression_in_parenthesise -> open_parenthesise int_expression . close_parenthesise
    (82) expression -> int_expression .

    close_parenthesise shift and go to state 124
    add_operator    reduce using rule 82 (expression -> int_expression .)
    sub_operator    reduce using rule 82 (expression -> int_expression .)
    asterisk        reduce using rule 82 (expression -> int_expression .)
    dev_operator    reduce using rule 82 (expression -> int_expression .)
    dev_rest_operator reduce using rule 82 (expression -> int_expression .)
    less_operator   reduce using rule 82 (expression -> int_expression .)
    greater_operator reduce using rule 82 (expression -> int_expression .)
    equality_operator reduce using rule 82 (expression -> int_expression .)
    not_equals_operator reduce using rule 82 (expression -> int_expression .)


state 97

    (84) add_expression -> expression add_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 125
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 98

    (85) sub_expression -> expression sub_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 126
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 99

    (86) mul_expression -> expression asterisk . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 127
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 100

    (87) dev_expression -> expression dev_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 128
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 101

    (88) dev_rest_expression -> expression dev_rest_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 129
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 102

    (15) function_call -> function_name open_parenthesise function_call_parameters . close_parenthesise
    (14) function_call_parameters -> function_call_parameters . comma value

    close_parenthesise shift and go to state 130
    comma           shift and go to state 131


state 103

    (13) function_call_parameters -> value .

    close_parenthesise reduce using rule 13 (function_call_parameters -> value .)
    comma           reduce using rule 13 (function_call_parameters -> value .)


state 104

    (4) assert_statement -> assert value comma . value
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    value                          shift and go to state 132
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 105

    (49) condition_in_parenthesise -> open_parenthesise . condition close_parenthesise
    (83) int_expression_in_parenthesise -> open_parenthesise . int_expression close_parenthesise
    (38) condition -> . simple_condition
    (39) condition -> . complex_condition
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (40) simple_condition -> . les_condition
    (41) simple_condition -> . grater_condition
    (42) simple_condition -> . equality_condition
    (43) simple_condition -> . not_equals_condition
    (44) simple_condition -> . condition_in_parenthesise
    (45) complex_condition -> . and_condition
    (46) complex_condition -> . or_condition
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (50) les_condition -> . expression less_operator expression
    (51) grater_condition -> . expression greater_operator expression
    (52) equality_condition -> . expression equality_operator expression
    (53) not_equals_condition -> . expression not_equals_operator expression
    (49) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (48) and_condition -> . condition and_operator simple_condition
    (47) or_condition -> . condition or_operator simple_condition
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 133
    name            shift and go to state 74

    condition                      shift and go to state 134
    int_expression                 shift and go to state 96
    simple_condition               shift and go to state 107
    complex_condition              shift and go to state 108
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    les_condition                  shift and go to state 109
    grater_condition               shift and go to state 110
    equality_condition             shift and go to state 111
    not_equals_condition           shift and go to state 112
    condition_in_parenthesise      shift and go to state 113
    and_condition                  shift and go to state 114
    or_condition                   shift and go to state 115
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 135
    function_name                  shift and go to state 38

state 106

    (54) if_statement -> if_keyword open_parenthesise condition . close_parenthesise scope else_statement
    (55) if_statement -> if_keyword open_parenthesise condition . close_parenthesise scope
    (48) and_condition -> condition . and_operator simple_condition
    (47) or_condition -> condition . or_operator simple_condition

    close_parenthesise shift and go to state 136
    and_operator    shift and go to state 137
    or_operator     shift and go to state 138


state 107

    (38) condition -> simple_condition .

    close_parenthesise reduce using rule 38 (condition -> simple_condition .)
    and_operator    reduce using rule 38 (condition -> simple_condition .)
    or_operator     reduce using rule 38 (condition -> simple_condition .)


state 108

    (39) condition -> complex_condition .

    close_parenthesise reduce using rule 39 (condition -> complex_condition .)
    and_operator    reduce using rule 39 (condition -> complex_condition .)
    or_operator     reduce using rule 39 (condition -> complex_condition .)


state 109

    (40) simple_condition -> les_condition .

    close_parenthesise reduce using rule 40 (simple_condition -> les_condition .)
    and_operator    reduce using rule 40 (simple_condition -> les_condition .)
    or_operator     reduce using rule 40 (simple_condition -> les_condition .)


state 110

    (41) simple_condition -> grater_condition .

    close_parenthesise reduce using rule 41 (simple_condition -> grater_condition .)
    and_operator    reduce using rule 41 (simple_condition -> grater_condition .)
    or_operator     reduce using rule 41 (simple_condition -> grater_condition .)


state 111

    (42) simple_condition -> equality_condition .

    close_parenthesise reduce using rule 42 (simple_condition -> equality_condition .)
    and_operator    reduce using rule 42 (simple_condition -> equality_condition .)
    or_operator     reduce using rule 42 (simple_condition -> equality_condition .)


state 112

    (43) simple_condition -> not_equals_condition .

    close_parenthesise reduce using rule 43 (simple_condition -> not_equals_condition .)
    and_operator    reduce using rule 43 (simple_condition -> not_equals_condition .)
    or_operator     reduce using rule 43 (simple_condition -> not_equals_condition .)


state 113

    (44) simple_condition -> condition_in_parenthesise .

    close_parenthesise reduce using rule 44 (simple_condition -> condition_in_parenthesise .)
    and_operator    reduce using rule 44 (simple_condition -> condition_in_parenthesise .)
    or_operator     reduce using rule 44 (simple_condition -> condition_in_parenthesise .)


state 114

    (45) complex_condition -> and_condition .

    close_parenthesise reduce using rule 45 (complex_condition -> and_condition .)
    and_operator    reduce using rule 45 (complex_condition -> and_condition .)
    or_operator     reduce using rule 45 (complex_condition -> and_condition .)


state 115

    (46) complex_condition -> or_condition .

    close_parenthesise reduce using rule 46 (complex_condition -> or_condition .)
    and_operator    reduce using rule 46 (complex_condition -> or_condition .)
    or_operator     reduce using rule 46 (complex_condition -> or_condition .)


state 116

    (50) les_condition -> expression . less_operator expression
    (51) grater_condition -> expression . greater_operator expression
    (52) equality_condition -> expression . equality_operator expression
    (53) not_equals_condition -> expression . not_equals_operator expression
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    less_operator   shift and go to state 139
    greater_operator shift and go to state 140
    equality_operator shift and go to state 141
    not_equals_operator shift and go to state 142
    add_operator    shift and go to state 97
    sub_operator    shift and go to state 98
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101


state 117

    (82) expression -> int_expression .

    less_operator   reduce using rule 82 (expression -> int_expression .)
    greater_operator reduce using rule 82 (expression -> int_expression .)
    equality_operator reduce using rule 82 (expression -> int_expression .)
    not_equals_operator reduce using rule 82 (expression -> int_expression .)
    add_operator    reduce using rule 82 (expression -> int_expression .)
    sub_operator    reduce using rule 82 (expression -> int_expression .)
    asterisk        reduce using rule 82 (expression -> int_expression .)
    dev_operator    reduce using rule 82 (expression -> int_expression .)
    dev_rest_operator reduce using rule 82 (expression -> int_expression .)
    semicolon       reduce using rule 82 (expression -> int_expression .)
    comma           reduce using rule 82 (expression -> int_expression .)
    close_brackets  reduce using rule 82 (expression -> int_expression .)
    close_parenthesise reduce using rule 82 (expression -> int_expression .)
    and_operator    reduce using rule 82 (expression -> int_expression .)
    or_operator     reduce using rule 82 (expression -> int_expression .)


state 118

    (57) while_statement -> while_keyword open_parenthesise condition . close_parenthesise scope
    (48) and_condition -> condition . and_operator simple_condition
    (47) or_condition -> condition . or_operator simple_condition

    close_parenthesise shift and go to state 143
    and_operator    shift and go to state 137
    or_operator     shift and go to state 138


state 119

    (9) function_impl_parameters -> function_impl_parameters comma data_type . new_function_parameter_name
    (91) new_function_parameter_name -> . name

    name            shift and go to state 90

    new_function_parameter_name    shift and go to state 144

state 120

    (61) def_var -> data_type new_var_name equals_operator value .

    semicolon       reduce using rule 61 (def_var -> data_type new_var_name equals_operator value .)


state 121

    (62) def_array -> data_type new_var_name open_brackets simple_int_value . close_brackets

    close_brackets  shift and go to state 145


state 122

    (95) read_line_statement -> read_line array_name comma simple_int_value .

    semicolon       reduce using rule 95 (read_line_statement -> read_line array_name comma simple_int_value .)


state 123

    (63) array_cell -> array_name open_brackets value close_brackets .

    equals_operator reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    semicolon       reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    add_operator    reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    sub_operator    reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    asterisk        reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    dev_operator    reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    dev_rest_operator reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    comma           reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    close_brackets  reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    close_parenthesise reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    less_operator   reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    greater_operator reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    equality_operator reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    not_equals_operator reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    and_operator    reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)
    or_operator     reduce using rule 63 (array_cell -> array_name open_brackets value close_brackets .)


state 124

    (83) int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .

    semicolon       reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    add_operator    reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    sub_operator    reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    asterisk        reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    dev_operator    reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    dev_rest_operator reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    comma           reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    close_brackets  reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    close_parenthesise reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    less_operator   reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    greater_operator reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    equality_operator reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    not_equals_operator reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    and_operator    reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    or_operator     reduce using rule 83 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)


state 125

    (84) add_expression -> expression add_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 84 (add_expression -> expression add_operator expression .)
    add_operator    reduce using rule 84 (add_expression -> expression add_operator expression .)
    sub_operator    reduce using rule 84 (add_expression -> expression add_operator expression .)
    comma           reduce using rule 84 (add_expression -> expression add_operator expression .)
    close_brackets  reduce using rule 84 (add_expression -> expression add_operator expression .)
    close_parenthesise reduce using rule 84 (add_expression -> expression add_operator expression .)
    less_operator   reduce using rule 84 (add_expression -> expression add_operator expression .)
    greater_operator reduce using rule 84 (add_expression -> expression add_operator expression .)
    equality_operator reduce using rule 84 (add_expression -> expression add_operator expression .)
    not_equals_operator reduce using rule 84 (add_expression -> expression add_operator expression .)
    and_operator    reduce using rule 84 (add_expression -> expression add_operator expression .)
    or_operator     reduce using rule 84 (add_expression -> expression add_operator expression .)
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101

  ! asterisk        [ reduce using rule 84 (add_expression -> expression add_operator expression .) ]
  ! dev_operator    [ reduce using rule 84 (add_expression -> expression add_operator expression .) ]
  ! dev_rest_operator [ reduce using rule 84 (add_expression -> expression add_operator expression .) ]
  ! add_operator    [ shift and go to state 97 ]
  ! sub_operator    [ shift and go to state 98 ]


state 126

    (85) sub_expression -> expression sub_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    add_operator    reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    sub_operator    reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    comma           reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    close_brackets  reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    close_parenthesise reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    less_operator   reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    greater_operator reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    equality_operator reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    not_equals_operator reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    and_operator    reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    or_operator     reduce using rule 85 (sub_expression -> expression sub_operator expression .)
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101

  ! asterisk        [ reduce using rule 85 (sub_expression -> expression sub_operator expression .) ]
  ! dev_operator    [ reduce using rule 85 (sub_expression -> expression sub_operator expression .) ]
  ! dev_rest_operator [ reduce using rule 85 (sub_expression -> expression sub_operator expression .) ]
  ! add_operator    [ shift and go to state 97 ]
  ! sub_operator    [ shift and go to state 98 ]


state 127

    (86) mul_expression -> expression asterisk expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 86 (mul_expression -> expression asterisk expression .)
    add_operator    reduce using rule 86 (mul_expression -> expression asterisk expression .)
    sub_operator    reduce using rule 86 (mul_expression -> expression asterisk expression .)
    asterisk        reduce using rule 86 (mul_expression -> expression asterisk expression .)
    dev_operator    reduce using rule 86 (mul_expression -> expression asterisk expression .)
    dev_rest_operator reduce using rule 86 (mul_expression -> expression asterisk expression .)
    comma           reduce using rule 86 (mul_expression -> expression asterisk expression .)
    close_brackets  reduce using rule 86 (mul_expression -> expression asterisk expression .)
    close_parenthesise reduce using rule 86 (mul_expression -> expression asterisk expression .)
    less_operator   reduce using rule 86 (mul_expression -> expression asterisk expression .)
    greater_operator reduce using rule 86 (mul_expression -> expression asterisk expression .)
    equality_operator reduce using rule 86 (mul_expression -> expression asterisk expression .)
    not_equals_operator reduce using rule 86 (mul_expression -> expression asterisk expression .)
    and_operator    reduce using rule 86 (mul_expression -> expression asterisk expression .)
    or_operator     reduce using rule 86 (mul_expression -> expression asterisk expression .)

  ! add_operator    [ shift and go to state 97 ]
  ! sub_operator    [ shift and go to state 98 ]
  ! asterisk        [ shift and go to state 99 ]
  ! dev_operator    [ shift and go to state 100 ]
  ! dev_rest_operator [ shift and go to state 101 ]


state 128

    (87) dev_expression -> expression dev_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    add_operator    reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    sub_operator    reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    asterisk        reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    dev_operator    reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    dev_rest_operator reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    comma           reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    close_brackets  reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    close_parenthesise reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    less_operator   reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    greater_operator reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    equality_operator reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    not_equals_operator reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    and_operator    reduce using rule 87 (dev_expression -> expression dev_operator expression .)
    or_operator     reduce using rule 87 (dev_expression -> expression dev_operator expression .)

  ! add_operator    [ shift and go to state 97 ]
  ! sub_operator    [ shift and go to state 98 ]
  ! asterisk        [ shift and go to state 99 ]
  ! dev_operator    [ shift and go to state 100 ]
  ! dev_rest_operator [ shift and go to state 101 ]


state 129

    (88) dev_rest_expression -> expression dev_rest_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    add_operator    reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    sub_operator    reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    asterisk        reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    dev_operator    reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    dev_rest_operator reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    comma           reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    close_brackets  reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    close_parenthesise reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    less_operator   reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    greater_operator reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    equality_operator reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    not_equals_operator reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    and_operator    reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)
    or_operator     reduce using rule 88 (dev_rest_expression -> expression dev_rest_operator expression .)

  ! add_operator    [ shift and go to state 97 ]
  ! sub_operator    [ shift and go to state 98 ]
  ! asterisk        [ shift and go to state 99 ]
  ! dev_operator    [ shift and go to state 100 ]
  ! dev_rest_operator [ shift and go to state 101 ]


state 130

    (15) function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .

    semicolon       reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    add_operator    reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    sub_operator    reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    asterisk        reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    dev_operator    reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    dev_rest_operator reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    comma           reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    close_brackets  reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    close_parenthesise reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    less_operator   reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    greater_operator reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    equality_operator reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    not_equals_operator reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    and_operator    reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    or_operator     reduce using rule 15 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)


state 131

    (14) function_call_parameters -> function_call_parameters comma . value
    (70) value -> . int_value
    (67) int_value -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    value                          shift and go to state 146
    int_value                      shift and go to state 79
    int_expression                 shift and go to state 80
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 75
    function_name                  shift and go to state 38

state 132

    (4) assert_statement -> assert value comma value .

    semicolon       reduce using rule 4 (assert_statement -> assert value comma value .)


state 133

    (83) int_expression_in_parenthesise -> open_parenthesise . int_expression close_parenthesise
    (49) condition_in_parenthesise -> open_parenthesise . condition close_parenthesise
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (38) condition -> . simple_condition
    (39) condition -> . complex_condition
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (40) simple_condition -> . les_condition
    (41) simple_condition -> . grater_condition
    (42) simple_condition -> . equality_condition
    (43) simple_condition -> . not_equals_condition
    (44) simple_condition -> . condition_in_parenthesise
    (45) complex_condition -> . and_condition
    (46) complex_condition -> . or_condition
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (82) expression -> . int_expression
    (50) les_condition -> . expression less_operator expression
    (51) grater_condition -> . expression greater_operator expression
    (52) equality_condition -> . expression equality_operator expression
    (53) not_equals_condition -> . expression not_equals_operator expression
    (49) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (48) and_condition -> . condition and_operator simple_condition
    (47) or_condition -> . condition or_operator simple_condition
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 133
    name            shift and go to state 74

    int_expression                 shift and go to state 96
    condition                      shift and go to state 134
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    simple_condition               shift and go to state 107
    complex_condition              shift and go to state 108
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    expression                     shift and go to state 135
    les_condition                  shift and go to state 109
    grater_condition               shift and go to state 110
    equality_condition             shift and go to state 111
    not_equals_condition           shift and go to state 112
    condition_in_parenthesise      shift and go to state 113
    and_condition                  shift and go to state 114
    or_condition                   shift and go to state 115
    function_name                  shift and go to state 38

state 134

    (49) condition_in_parenthesise -> open_parenthesise condition . close_parenthesise
    (48) and_condition -> condition . and_operator simple_condition
    (47) or_condition -> condition . or_operator simple_condition

    close_parenthesise shift and go to state 147
    and_operator    shift and go to state 137
    or_operator     shift and go to state 138


state 135

    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression
    (50) les_condition -> expression . less_operator expression
    (51) grater_condition -> expression . greater_operator expression
    (52) equality_condition -> expression . equality_operator expression
    (53) not_equals_condition -> expression . not_equals_operator expression

    add_operator    shift and go to state 97
    sub_operator    shift and go to state 98
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101
    less_operator   shift and go to state 139
    greater_operator shift and go to state 140
    equality_operator shift and go to state 141
    not_equals_operator shift and go to state 142


state 136

    (54) if_statement -> if_keyword open_parenthesise condition close_parenthesise . scope else_statement
    (55) if_statement -> if_keyword open_parenthesise condition close_parenthesise . scope
    (37) scope -> . scope_start code_block scope_end
    (35) scope_start -> . open_curly_brackets

    open_curly_brackets shift and go to state 150

    scope                          shift and go to state 148
    scope_start                    shift and go to state 149

state 137

    (48) and_condition -> condition and_operator . simple_condition
    (40) simple_condition -> . les_condition
    (41) simple_condition -> . grater_condition
    (42) simple_condition -> . equality_condition
    (43) simple_condition -> . not_equals_condition
    (44) simple_condition -> . condition_in_parenthesise
    (50) les_condition -> . expression less_operator expression
    (51) grater_condition -> . expression greater_operator expression
    (52) equality_condition -> . expression equality_operator expression
    (53) not_equals_condition -> . expression not_equals_operator expression
    (49) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    open_parenthesise shift and go to state 105
    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    name            shift and go to state 74

    simple_condition               shift and go to state 151
    les_condition                  shift and go to state 109
    grater_condition               shift and go to state 110
    equality_condition             shift and go to state 111
    not_equals_condition           shift and go to state 112
    condition_in_parenthesise      shift and go to state 113
    expression                     shift and go to state 116
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 138

    (47) or_condition -> condition or_operator . simple_condition
    (40) simple_condition -> . les_condition
    (41) simple_condition -> . grater_condition
    (42) simple_condition -> . equality_condition
    (43) simple_condition -> . not_equals_condition
    (44) simple_condition -> . condition_in_parenthesise
    (50) les_condition -> . expression less_operator expression
    (51) grater_condition -> . expression greater_operator expression
    (52) equality_condition -> . expression equality_operator expression
    (53) not_equals_condition -> . expression not_equals_operator expression
    (49) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    open_parenthesise shift and go to state 105
    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    name            shift and go to state 74

    simple_condition               shift and go to state 152
    les_condition                  shift and go to state 109
    grater_condition               shift and go to state 110
    equality_condition             shift and go to state 111
    not_equals_condition           shift and go to state 112
    condition_in_parenthesise      shift and go to state 113
    expression                     shift and go to state 116
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 139

    (50) les_condition -> expression less_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 153
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 140

    (51) grater_condition -> expression greater_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 154
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 141

    (52) equality_condition -> expression equality_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 155
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 142

    (53) not_equals_condition -> expression not_equals_operator . expression
    (82) expression -> . int_expression
    (72) int_expression -> . simple_int_value
    (73) int_expression -> . function_call_value
    (74) int_expression -> . array_cell
    (75) int_expression -> . int_expression_in_parenthesise
    (76) int_expression -> . var_name
    (77) int_expression -> . add_expression
    (78) int_expression -> . sub_expression
    (79) int_expression -> . mul_expression
    (80) int_expression -> . dev_expression
    (81) int_expression -> . dev_rest_expression
    (65) simple_int_value -> . int_32_value
    (66) simple_int_value -> . char_value
    (71) function_call_value -> . function_call
    (63) array_cell -> . array_name open_brackets value close_brackets
    (83) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (89) var_name -> . name
    (84) add_expression -> . expression add_operator expression
    (85) sub_expression -> . expression sub_operator expression
    (86) mul_expression -> . expression asterisk expression
    (87) dev_expression -> . expression dev_operator expression
    (88) dev_rest_expression -> . expression dev_rest_operator expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (90) array_name -> . name
    (93) function_name -> . name

    int_32_value    shift and go to state 70
    char_value      shift and go to state 71
    open_parenthesise shift and go to state 73
    name            shift and go to state 74

    expression                     shift and go to state 156
    int_expression                 shift and go to state 117
    simple_int_value               shift and go to state 60
    function_call_value            shift and go to state 61
    array_cell                     shift and go to state 62
    int_expression_in_parenthesise shift and go to state 63
    var_name                       shift and go to state 64
    add_expression                 shift and go to state 65
    sub_expression                 shift and go to state 66
    mul_expression                 shift and go to state 67
    dev_expression                 shift and go to state 68
    dev_rest_expression            shift and go to state 69
    function_call                  shift and go to state 72
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38

state 143

    (57) while_statement -> while_keyword open_parenthesise condition close_parenthesise . scope
    (37) scope -> . scope_start code_block scope_end
    (35) scope_start -> . open_curly_brackets

    open_curly_brackets shift and go to state 150

    scope                          shift and go to state 157
    scope_start                    shift and go to state 149

state 144

    (9) function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name .

    close_parenthesise reduce using rule 9 (function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name .)
    comma           reduce using rule 9 (function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name .)


state 145

    (62) def_array -> data_type new_var_name open_brackets simple_int_value close_brackets .

    semicolon       reduce using rule 62 (def_array -> data_type new_var_name open_brackets simple_int_value close_brackets .)


state 146

    (14) function_call_parameters -> function_call_parameters comma value .

    close_parenthesise reduce using rule 14 (function_call_parameters -> function_call_parameters comma value .)
    comma           reduce using rule 14 (function_call_parameters -> function_call_parameters comma value .)


state 147

    (49) condition_in_parenthesise -> open_parenthesise condition close_parenthesise .

    close_parenthesise reduce using rule 49 (condition_in_parenthesise -> open_parenthesise condition close_parenthesise .)
    and_operator    reduce using rule 49 (condition_in_parenthesise -> open_parenthesise condition close_parenthesise .)
    or_operator     reduce using rule 49 (condition_in_parenthesise -> open_parenthesise condition close_parenthesise .)


state 148

    (54) if_statement -> if_keyword open_parenthesise condition close_parenthesise scope . else_statement
    (55) if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .
    (56) else_statement -> . else_keyword scope

    close_curly_brackets reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    read_line       reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    exit            reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    return          reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    assert          reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    if_keyword      reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    while_keyword   reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    int_32_keyword  reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    char_keyword    reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    print           reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    print_array     reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    name            reduce using rule 55 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    else_keyword    shift and go to state 159

    else_statement                 shift and go to state 158

state 149

    (37) scope -> scope_start . code_block scope_end
    (19) code_block -> . statement
    (20) code_block -> . code_block statement
    (21) code_block -> .
    (22) statement -> . basic_block_command semicolon
    (23) statement -> . block
    (24) basic_block_command -> . def_var
    (25) basic_block_command -> . def_array
    (26) basic_block_command -> . int_assignment
    (27) basic_block_command -> . print_statement
    (28) basic_block_command -> . read_line_statement
    (29) basic_block_command -> . exit_statement
    (30) basic_block_command -> . function_call
    (31) basic_block_command -> . return_statement
    (32) basic_block_command -> . assert_statement
    (33) block -> . if_statement
    (34) block -> . while_statement
    (60) def_var -> . data_type new_var_name
    (61) def_var -> . data_type new_var_name equals_operator value
    (62) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (64) int_assignment -> . dest_var equals_operator value
    (96) print_statement -> . print_value_statement
    (97) print_statement -> . print_string_statement
    (98) print_statement -> . print_array_statement
    (95) read_line_statement -> . read_line array_name comma simple_int_value
    (94) exit_statement -> . exit int_expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (4) assert_statement -> . assert value comma value
    (54) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (55) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (57) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword
    (68) dest_var -> . var_name
    (69) dest_var -> . array_cell
    (100) print_value_statement -> . print value
    (101) print_string_statement -> . print string
    (99) print_array_statement -> . print_array array_name
    (93) function_name -> . name
    (89) var_name -> . name
    (63) array_cell -> . array_name open_brackets value close_brackets
    (90) array_name -> . name

  ! shift/reduce conflict for read_line resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for assert resolved as shift
  ! shift/reduce conflict for if_keyword resolved as shift
  ! shift/reduce conflict for while_keyword resolved as shift
  ! shift/reduce conflict for int_32_keyword resolved as shift
  ! shift/reduce conflict for char_keyword resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for print_array resolved as shift
  ! shift/reduce conflict for name resolved as shift
    close_curly_brackets reduce using rule 21 (code_block -> .)
    read_line       shift and go to state 35
    exit            shift and go to state 37
    return          shift and go to state 39
    assert          shift and go to state 40
    if_keyword      shift and go to state 41
    while_keyword   shift and go to state 42
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 45
    print_array     shift and go to state 46
    name            shift and go to state 47

  ! read_line       [ reduce using rule 21 (code_block -> .) ]
  ! exit            [ reduce using rule 21 (code_block -> .) ]
  ! return          [ reduce using rule 21 (code_block -> .) ]
  ! assert          [ reduce using rule 21 (code_block -> .) ]
  ! if_keyword      [ reduce using rule 21 (code_block -> .) ]
  ! while_keyword   [ reduce using rule 21 (code_block -> .) ]
  ! int_32_keyword  [ reduce using rule 21 (code_block -> .) ]
  ! char_keyword    [ reduce using rule 21 (code_block -> .) ]
  ! print           [ reduce using rule 21 (code_block -> .) ]
  ! print_array     [ reduce using rule 21 (code_block -> .) ]
  ! name            [ reduce using rule 21 (code_block -> .) ]

    code_block                     shift and go to state 160
    statement                      shift and go to state 16
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    assert_statement               shift and go to state 27
    if_statement                   shift and go to state 28
    while_statement                shift and go to state 29
    data_type                      shift and go to state 30
    dest_var                       shift and go to state 31
    print_value_statement          shift and go to state 32
    print_string_statement         shift and go to state 33
    print_array_statement          shift and go to state 34
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38
    var_name                       shift and go to state 43
    array_cell                     shift and go to state 44

state 150

    (35) scope_start -> open_curly_brackets .

    read_line       reduce using rule 35 (scope_start -> open_curly_brackets .)
    exit            reduce using rule 35 (scope_start -> open_curly_brackets .)
    return          reduce using rule 35 (scope_start -> open_curly_brackets .)
    assert          reduce using rule 35 (scope_start -> open_curly_brackets .)
    if_keyword      reduce using rule 35 (scope_start -> open_curly_brackets .)
    while_keyword   reduce using rule 35 (scope_start -> open_curly_brackets .)
    int_32_keyword  reduce using rule 35 (scope_start -> open_curly_brackets .)
    char_keyword    reduce using rule 35 (scope_start -> open_curly_brackets .)
    print           reduce using rule 35 (scope_start -> open_curly_brackets .)
    print_array     reduce using rule 35 (scope_start -> open_curly_brackets .)
    name            reduce using rule 35 (scope_start -> open_curly_brackets .)
    close_curly_brackets reduce using rule 35 (scope_start -> open_curly_brackets .)


state 151

    (48) and_condition -> condition and_operator simple_condition .

    close_parenthesise reduce using rule 48 (and_condition -> condition and_operator simple_condition .)
    and_operator    reduce using rule 48 (and_condition -> condition and_operator simple_condition .)
    or_operator     reduce using rule 48 (and_condition -> condition and_operator simple_condition .)


state 152

    (47) or_condition -> condition or_operator simple_condition .

    close_parenthesise reduce using rule 47 (or_condition -> condition or_operator simple_condition .)
    and_operator    reduce using rule 47 (or_condition -> condition or_operator simple_condition .)
    or_operator     reduce using rule 47 (or_condition -> condition or_operator simple_condition .)


state 153

    (50) les_condition -> expression less_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 50 (les_condition -> expression less_operator expression .)
    and_operator    reduce using rule 50 (les_condition -> expression less_operator expression .)
    or_operator     reduce using rule 50 (les_condition -> expression less_operator expression .)
    add_operator    shift and go to state 97
    sub_operator    shift and go to state 98
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101


state 154

    (51) grater_condition -> expression greater_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 51 (grater_condition -> expression greater_operator expression .)
    and_operator    reduce using rule 51 (grater_condition -> expression greater_operator expression .)
    or_operator     reduce using rule 51 (grater_condition -> expression greater_operator expression .)
    add_operator    shift and go to state 97
    sub_operator    shift and go to state 98
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101


state 155

    (52) equality_condition -> expression equality_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 52 (equality_condition -> expression equality_operator expression .)
    and_operator    reduce using rule 52 (equality_condition -> expression equality_operator expression .)
    or_operator     reduce using rule 52 (equality_condition -> expression equality_operator expression .)
    add_operator    shift and go to state 97
    sub_operator    shift and go to state 98
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101


state 156

    (53) not_equals_condition -> expression not_equals_operator expression .
    (84) add_expression -> expression . add_operator expression
    (85) sub_expression -> expression . sub_operator expression
    (86) mul_expression -> expression . asterisk expression
    (87) dev_expression -> expression . dev_operator expression
    (88) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 53 (not_equals_condition -> expression not_equals_operator expression .)
    and_operator    reduce using rule 53 (not_equals_condition -> expression not_equals_operator expression .)
    or_operator     reduce using rule 53 (not_equals_condition -> expression not_equals_operator expression .)
    add_operator    shift and go to state 97
    sub_operator    shift and go to state 98
    asterisk        shift and go to state 99
    dev_operator    shift and go to state 100
    dev_rest_operator shift and go to state 101


state 157

    (57) while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .

    close_curly_brackets reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    read_line       reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    exit            reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    return          reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    assert          reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    if_keyword      reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    while_keyword   reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    int_32_keyword  reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    char_keyword    reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    print           reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    print_array     reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    name            reduce using rule 57 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)


state 158

    (54) if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .

    close_curly_brackets reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    read_line       reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    exit            reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    return          reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    assert          reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    if_keyword      reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    while_keyword   reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    int_32_keyword  reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    char_keyword    reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    print           reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    print_array     reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    name            reduce using rule 54 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)


state 159

    (56) else_statement -> else_keyword . scope
    (37) scope -> . scope_start code_block scope_end
    (35) scope_start -> . open_curly_brackets

    open_curly_brackets shift and go to state 150

    scope                          shift and go to state 161
    scope_start                    shift and go to state 149

state 160

    (37) scope -> scope_start code_block . scope_end
    (20) code_block -> code_block . statement
    (36) scope_end -> . close_curly_brackets
    (22) statement -> . basic_block_command semicolon
    (23) statement -> . block
    (24) basic_block_command -> . def_var
    (25) basic_block_command -> . def_array
    (26) basic_block_command -> . int_assignment
    (27) basic_block_command -> . print_statement
    (28) basic_block_command -> . read_line_statement
    (29) basic_block_command -> . exit_statement
    (30) basic_block_command -> . function_call
    (31) basic_block_command -> . return_statement
    (32) basic_block_command -> . assert_statement
    (33) block -> . if_statement
    (34) block -> . while_statement
    (60) def_var -> . data_type new_var_name
    (61) def_var -> . data_type new_var_name equals_operator value
    (62) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (64) int_assignment -> . dest_var equals_operator value
    (96) print_statement -> . print_value_statement
    (97) print_statement -> . print_string_statement
    (98) print_statement -> . print_array_statement
    (95) read_line_statement -> . read_line array_name comma simple_int_value
    (94) exit_statement -> . exit int_expression
    (15) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (4) assert_statement -> . assert value comma value
    (54) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (55) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (57) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (58) data_type -> . int_32_keyword
    (59) data_type -> . char_keyword
    (68) dest_var -> . var_name
    (69) dest_var -> . array_cell
    (100) print_value_statement -> . print value
    (101) print_string_statement -> . print string
    (99) print_array_statement -> . print_array array_name
    (93) function_name -> . name
    (89) var_name -> . name
    (63) array_cell -> . array_name open_brackets value close_brackets
    (90) array_name -> . name

    close_curly_brackets shift and go to state 163
    read_line       shift and go to state 35
    exit            shift and go to state 37
    return          shift and go to state 39
    assert          shift and go to state 40
    if_keyword      shift and go to state 41
    while_keyword   shift and go to state 42
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 45
    print_array     shift and go to state 46
    name            shift and go to state 47

    scope_end                      shift and go to state 162
    statement                      shift and go to state 51
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    assert_statement               shift and go to state 27
    if_statement                   shift and go to state 28
    while_statement                shift and go to state 29
    data_type                      shift and go to state 30
    dest_var                       shift and go to state 31
    print_value_statement          shift and go to state 32
    print_string_statement         shift and go to state 33
    print_array_statement          shift and go to state 34
    array_name                     shift and go to state 36
    function_name                  shift and go to state 38
    var_name                       shift and go to state 43
    array_cell                     shift and go to state 44

state 161

    (56) else_statement -> else_keyword scope .

    close_curly_brackets reduce using rule 56 (else_statement -> else_keyword scope .)
    read_line       reduce using rule 56 (else_statement -> else_keyword scope .)
    exit            reduce using rule 56 (else_statement -> else_keyword scope .)
    return          reduce using rule 56 (else_statement -> else_keyword scope .)
    assert          reduce using rule 56 (else_statement -> else_keyword scope .)
    if_keyword      reduce using rule 56 (else_statement -> else_keyword scope .)
    while_keyword   reduce using rule 56 (else_statement -> else_keyword scope .)
    int_32_keyword  reduce using rule 56 (else_statement -> else_keyword scope .)
    char_keyword    reduce using rule 56 (else_statement -> else_keyword scope .)
    print           reduce using rule 56 (else_statement -> else_keyword scope .)
    print_array     reduce using rule 56 (else_statement -> else_keyword scope .)
    name            reduce using rule 56 (else_statement -> else_keyword scope .)


state 162

    (37) scope -> scope_start code_block scope_end .

    else_keyword    reduce using rule 37 (scope -> scope_start code_block scope_end .)
    close_curly_brackets reduce using rule 37 (scope -> scope_start code_block scope_end .)
    read_line       reduce using rule 37 (scope -> scope_start code_block scope_end .)
    exit            reduce using rule 37 (scope -> scope_start code_block scope_end .)
    return          reduce using rule 37 (scope -> scope_start code_block scope_end .)
    assert          reduce using rule 37 (scope -> scope_start code_block scope_end .)
    if_keyword      reduce using rule 37 (scope -> scope_start code_block scope_end .)
    while_keyword   reduce using rule 37 (scope -> scope_start code_block scope_end .)
    int_32_keyword  reduce using rule 37 (scope -> scope_start code_block scope_end .)
    char_keyword    reduce using rule 37 (scope -> scope_start code_block scope_end .)
    print           reduce using rule 37 (scope -> scope_start code_block scope_end .)
    print_array     reduce using rule 37 (scope -> scope_start code_block scope_end .)
    name            reduce using rule 37 (scope -> scope_start code_block scope_end .)


state 163

    (36) scope_end -> close_curly_brackets .

    else_keyword    reduce using rule 36 (scope_end -> close_curly_brackets .)
    close_curly_brackets reduce using rule 36 (scope_end -> close_curly_brackets .)
    read_line       reduce using rule 36 (scope_end -> close_curly_brackets .)
    exit            reduce using rule 36 (scope_end -> close_curly_brackets .)
    return          reduce using rule 36 (scope_end -> close_curly_brackets .)
    assert          reduce using rule 36 (scope_end -> close_curly_brackets .)
    if_keyword      reduce using rule 36 (scope_end -> close_curly_brackets .)
    while_keyword   reduce using rule 36 (scope_end -> close_curly_brackets .)
    int_32_keyword  reduce using rule 36 (scope_end -> close_curly_brackets .)
    char_keyword    reduce using rule 36 (scope_end -> close_curly_brackets .)
    print           reduce using rule 36 (scope_end -> close_curly_brackets .)
    print_array     reduce using rule 36 (scope_end -> close_curly_brackets .)
    name            reduce using rule 36 (scope_end -> close_curly_brackets .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for read_line in state 11 resolved as shift
WARNING: shift/reduce conflict for exit in state 11 resolved as shift
WARNING: shift/reduce conflict for return in state 11 resolved as shift
WARNING: shift/reduce conflict for assert in state 11 resolved as shift
WARNING: shift/reduce conflict for if_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for while_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for int_32_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for char_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for print in state 11 resolved as shift
WARNING: shift/reduce conflict for print_array in state 11 resolved as shift
WARNING: shift/reduce conflict for name in state 11 resolved as shift
WARNING: shift/reduce conflict for read_line in state 149 resolved as shift
WARNING: shift/reduce conflict for exit in state 149 resolved as shift
WARNING: shift/reduce conflict for return in state 149 resolved as shift
WARNING: shift/reduce conflict for assert in state 149 resolved as shift
WARNING: shift/reduce conflict for if_keyword in state 149 resolved as shift
WARNING: shift/reduce conflict for while_keyword in state 149 resolved as shift
WARNING: shift/reduce conflict for int_32_keyword in state 149 resolved as shift
WARNING: shift/reduce conflict for char_keyword in state 149 resolved as shift
WARNING: shift/reduce conflict for print in state 149 resolved as shift
WARNING: shift/reduce conflict for print_array in state 149 resolved as shift
WARNING: shift/reduce conflict for name in state 149 resolved as shift
