Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    new_line

Grammar

Rule 0     S' -> program
Rule 1     program -> function_impl
Rule 2     program -> program function_impl
Rule 3     return_statement -> return return_value
Rule 4     return_value -> value
Rule 5     return_value -> <empty>
Rule 6     function_impl_parameters -> <empty>
Rule 7     function_impl_parameters -> data_type new_function_parameter_name
Rule 8     function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name
Rule 9     function_prototype_start -> function_ret_type function_name
Rule 10    function_prototype -> function_prototype_start open_parenthesise function_impl_parameters close_parenthesise
Rule 11    function_call_parameters -> <empty>
Rule 12    function_call_parameters -> value
Rule 13    function_call_parameters -> function_call_parameters comma value
Rule 14    function_call -> function_name open_parenthesise function_call_parameters close_parenthesise
Rule 15    function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets
Rule 16    function_ret_type -> data_type
Rule 17    function_ret_type -> void_keyword
Rule 18    code_block -> statement
Rule 19    code_block -> code_block statement
Rule 20    code_block -> <empty>
Rule 21    statement -> basic_block_command semicolon
Rule 22    statement -> block
Rule 23    basic_block_command -> def_var
Rule 24    basic_block_command -> def_array
Rule 25    basic_block_command -> int_assignment
Rule 26    basic_block_command -> print_statement
Rule 27    basic_block_command -> read_line_statement
Rule 28    basic_block_command -> exit_statement
Rule 29    basic_block_command -> function_call
Rule 30    basic_block_command -> return_statement
Rule 31    block -> if_statement
Rule 32    block -> while_statement
Rule 33    scope_start -> open_curly_brackets
Rule 34    scope_end -> close_curly_brackets
Rule 35    scope -> scope_start code_block scope_end
Rule 36    condition -> simple_condition
Rule 37    condition -> complex_condition
Rule 38    simple_condition -> les_condition
Rule 39    simple_condition -> grater_condition
Rule 40    simple_condition -> equality_condition
Rule 41    simple_condition -> not_equals_condition
Rule 42    simple_condition -> condition_in_parenthesise
Rule 43    complex_condition -> and_condition
Rule 44    complex_condition -> or_condition
Rule 45    or_condition -> condition or_operator simple_condition
Rule 46    and_condition -> condition and_operator simple_condition
Rule 47    condition_in_parenthesise -> open_parenthesise condition close_parenthesise
Rule 48    les_condition -> expression less_operator expression
Rule 49    grater_condition -> expression greater_operator expression
Rule 50    equality_condition -> expression equality_operator expression
Rule 51    not_equals_condition -> expression not_equals_operator expression
Rule 52    if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement
Rule 53    if_statement -> if_keyword open_parenthesise condition close_parenthesise scope
Rule 54    else_statement -> else_keyword scope
Rule 55    while_statement -> while_keyword open_parenthesise condition close_parenthesise scope
Rule 56    data_type -> int_32_keyword
Rule 57    data_type -> char_keyword
Rule 58    def_var -> data_type new_var_name
Rule 59    def_var -> data_type new_var_name equals_operator value
Rule 60    def_array -> data_type new_var_name open_brackets simple_int_value close_brackets
Rule 61    array_cell -> array_name open_brackets value close_brackets
Rule 62    int_assignment -> dest_var equals_operator value
Rule 63    simple_int_value -> int_32_value
Rule 64    simple_int_value -> char_value
Rule 65    int_value -> int_expression
Rule 66    dest_var -> var_name
Rule 67    dest_var -> array_cell
Rule 68    value -> int_value
Rule 69    function_call_value -> function_call
Rule 70    int_expression -> simple_int_value
Rule 71    int_expression -> function_call_value
Rule 72    int_expression -> array_cell
Rule 73    int_expression -> int_expression_in_parenthesise
Rule 74    int_expression -> var_name
Rule 75    int_expression -> add_expression
Rule 76    int_expression -> sub_expression
Rule 77    int_expression -> mul_expression
Rule 78    int_expression -> dev_expression
Rule 79    int_expression -> dev_rest_expression
Rule 80    expression -> int_expression
Rule 81    int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise
Rule 82    add_expression -> expression add_operator expression
Rule 83    sub_expression -> expression sub_operator expression
Rule 84    mul_expression -> expression mul_operator expression
Rule 85    dev_expression -> expression dev_operator expression
Rule 86    dev_rest_expression -> expression dev_rest_operator expression
Rule 87    var_name -> name
Rule 88    array_name -> name
Rule 89    new_function_parameter_name -> name
Rule 90    new_var_name -> name
Rule 91    function_name -> name
Rule 92    exit_statement -> exit int_expression
Rule 93    read_line_statement -> read_line array_name comma simple_int_value
Rule 94    print_statement -> print_value_statement
Rule 95    print_statement -> print_string_statement
Rule 96    print_statement -> print_array_statement
Rule 97    print_array_statement -> print_array array_name
Rule 98    print_value_statement -> print value
Rule 99    print_string_statement -> print string

Terminals, with rules where they appear

add_operator         : 82
and_operator         : 46
char_keyword         : 57
char_value           : 64
close_brackets       : 60 61
close_curly_brackets : 15 34
close_parenthesise   : 10 14 47 52 53 55 81
comma                : 8 13 93
dev_operator         : 85
dev_rest_operator    : 86
else_keyword         : 54
equality_operator    : 50
equals_operator      : 59 62
error                : 
exit                 : 92
greater_operator     : 49
if_keyword           : 52 53
int_32_keyword       : 56
int_32_value         : 63
less_operator        : 48
mul_operator         : 84
name                 : 87 88 89 90 91
new_line             : 
not_equals_operator  : 51
open_brackets        : 60 61
open_curly_brackets  : 15 33
open_parenthesise    : 10 14 47 52 53 55 81
or_operator          : 45
print                : 98 99
print_array          : 97
read_line            : 93
return               : 3
semicolon            : 21
string               : 99
sub_operator         : 83
void_keyword         : 17
while_keyword        : 55

Nonterminals, with rules where they appear

add_expression       : 75
and_condition        : 43
array_cell           : 67 72
array_name           : 61 93 97
basic_block_command  : 21
block                : 22
code_block           : 15 19 35
complex_condition    : 37
condition            : 45 46 47 52 53 55
condition_in_parenthesise : 42
data_type            : 7 8 16 58 59 60
def_array            : 24
def_var              : 23
dest_var             : 62
dev_expression       : 78
dev_rest_expression  : 79
else_statement       : 52
equality_condition   : 40
exit_statement       : 28
expression           : 48 48 49 49 50 50 51 51 82 82 83 83 84 84 85 85 86 86
function_call        : 29 69
function_call_parameters : 13 14
function_call_value  : 71
function_impl        : 1 2
function_impl_parameters : 8 10
function_name        : 9 14
function_prototype   : 15
function_prototype_start : 10
function_ret_type    : 9
grater_condition     : 39
if_statement         : 31
int_assignment       : 25
int_expression       : 65 80 81 92
int_expression_in_parenthesise : 73
int_value            : 68
les_condition        : 38
mul_expression       : 77
new_function_parameter_name : 7 8
new_var_name         : 58 59 60
not_equals_condition : 41
or_condition         : 44
print_array_statement : 96
print_statement      : 26
print_string_statement : 95
print_value_statement : 94
program              : 2 0
read_line_statement  : 27
return_statement     : 30
return_value         : 3
scope                : 52 53 54 55
scope_end            : 35
scope_start          : 35
simple_condition     : 36 45 46
simple_int_value     : 60 70 93
statement            : 18 19
sub_expression       : 76
value                : 4 12 13 59 61 62 98
var_name             : 66 74
while_statement      : 32

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . function_impl
    (2) program -> . program function_impl
    (15) function_impl -> . function_prototype open_curly_brackets code_block close_curly_brackets
    (10) function_prototype -> . function_prototype_start open_parenthesise function_impl_parameters close_parenthesise
    (9) function_prototype_start -> . function_ret_type function_name
    (16) function_ret_type -> . data_type
    (17) function_ret_type -> . void_keyword
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword

    void_keyword    shift and go to state 7
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    program                        shift and go to state 1
    function_impl                  shift and go to state 2
    function_prototype             shift and go to state 3
    function_prototype_start       shift and go to state 4
    function_ret_type              shift and go to state 5
    data_type                      shift and go to state 6

state 1

    (0) S' -> program .
    (2) program -> program . function_impl
    (15) function_impl -> . function_prototype open_curly_brackets code_block close_curly_brackets
    (10) function_prototype -> . function_prototype_start open_parenthesise function_impl_parameters close_parenthesise
    (9) function_prototype_start -> . function_ret_type function_name
    (16) function_ret_type -> . data_type
    (17) function_ret_type -> . void_keyword
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword

    void_keyword    shift and go to state 7
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    function_impl                  shift and go to state 10
    function_prototype             shift and go to state 3
    function_prototype_start       shift and go to state 4
    function_ret_type              shift and go to state 5
    data_type                      shift and go to state 6

state 2

    (1) program -> function_impl .

    void_keyword    reduce using rule 1 (program -> function_impl .)
    int_32_keyword  reduce using rule 1 (program -> function_impl .)
    char_keyword    reduce using rule 1 (program -> function_impl .)
    $end            reduce using rule 1 (program -> function_impl .)


state 3

    (15) function_impl -> function_prototype . open_curly_brackets code_block close_curly_brackets

    open_curly_brackets shift and go to state 11


state 4

    (10) function_prototype -> function_prototype_start . open_parenthesise function_impl_parameters close_parenthesise

    open_parenthesise shift and go to state 12


state 5

    (9) function_prototype_start -> function_ret_type . function_name
    (91) function_name -> . name

    name            shift and go to state 14

    function_name                  shift and go to state 13

state 6

    (16) function_ret_type -> data_type .

    name            reduce using rule 16 (function_ret_type -> data_type .)


state 7

    (17) function_ret_type -> void_keyword .

    name            reduce using rule 17 (function_ret_type -> void_keyword .)


state 8

    (56) data_type -> int_32_keyword .

    name            reduce using rule 56 (data_type -> int_32_keyword .)


state 9

    (57) data_type -> char_keyword .

    name            reduce using rule 57 (data_type -> char_keyword .)


state 10

    (2) program -> program function_impl .

    void_keyword    reduce using rule 2 (program -> program function_impl .)
    int_32_keyword  reduce using rule 2 (program -> program function_impl .)
    char_keyword    reduce using rule 2 (program -> program function_impl .)
    $end            reduce using rule 2 (program -> program function_impl .)


state 11

    (15) function_impl -> function_prototype open_curly_brackets . code_block close_curly_brackets
    (18) code_block -> . statement
    (19) code_block -> . code_block statement
    (20) code_block -> .
    (21) statement -> . basic_block_command semicolon
    (22) statement -> . block
    (23) basic_block_command -> . def_var
    (24) basic_block_command -> . def_array
    (25) basic_block_command -> . int_assignment
    (26) basic_block_command -> . print_statement
    (27) basic_block_command -> . read_line_statement
    (28) basic_block_command -> . exit_statement
    (29) basic_block_command -> . function_call
    (30) basic_block_command -> . return_statement
    (31) block -> . if_statement
    (32) block -> . while_statement
    (58) def_var -> . data_type new_var_name
    (59) def_var -> . data_type new_var_name equals_operator value
    (60) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (62) int_assignment -> . dest_var equals_operator value
    (94) print_statement -> . print_value_statement
    (95) print_statement -> . print_string_statement
    (96) print_statement -> . print_array_statement
    (93) read_line_statement -> . read_line array_name comma simple_int_value
    (92) exit_statement -> . exit int_expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (52) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (53) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (55) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword
    (66) dest_var -> . var_name
    (67) dest_var -> . array_cell
    (98) print_value_statement -> . print value
    (99) print_string_statement -> . print string
    (97) print_array_statement -> . print_array array_name
    (91) function_name -> . name
    (87) var_name -> . name
    (61) array_cell -> . array_name open_brackets value close_brackets
    (88) array_name -> . name

  ! shift/reduce conflict for read_line resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for if_keyword resolved as shift
  ! shift/reduce conflict for while_keyword resolved as shift
  ! shift/reduce conflict for int_32_keyword resolved as shift
  ! shift/reduce conflict for char_keyword resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for print_array resolved as shift
  ! shift/reduce conflict for name resolved as shift
    close_curly_brackets reduce using rule 20 (code_block -> .)
    read_line       shift and go to state 34
    exit            shift and go to state 36
    return          shift and go to state 38
    if_keyword      shift and go to state 39
    while_keyword   shift and go to state 40
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 43
    print_array     shift and go to state 44
    name            shift and go to state 45

  ! read_line       [ reduce using rule 20 (code_block -> .) ]
  ! exit            [ reduce using rule 20 (code_block -> .) ]
  ! return          [ reduce using rule 20 (code_block -> .) ]
  ! if_keyword      [ reduce using rule 20 (code_block -> .) ]
  ! while_keyword   [ reduce using rule 20 (code_block -> .) ]
  ! int_32_keyword  [ reduce using rule 20 (code_block -> .) ]
  ! char_keyword    [ reduce using rule 20 (code_block -> .) ]
  ! print           [ reduce using rule 20 (code_block -> .) ]
  ! print_array     [ reduce using rule 20 (code_block -> .) ]
  ! name            [ reduce using rule 20 (code_block -> .) ]

    code_block                     shift and go to state 15
    statement                      shift and go to state 16
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    if_statement                   shift and go to state 27
    while_statement                shift and go to state 28
    data_type                      shift and go to state 29
    dest_var                       shift and go to state 30
    print_value_statement          shift and go to state 31
    print_string_statement         shift and go to state 32
    print_array_statement          shift and go to state 33
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37
    var_name                       shift and go to state 41
    array_cell                     shift and go to state 42

state 12

    (10) function_prototype -> function_prototype_start open_parenthesise . function_impl_parameters close_parenthesise
    (6) function_impl_parameters -> .
    (7) function_impl_parameters -> . data_type new_function_parameter_name
    (8) function_impl_parameters -> . function_impl_parameters comma data_type new_function_parameter_name
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword

    close_parenthesise reduce using rule 6 (function_impl_parameters -> .)
    comma           reduce using rule 6 (function_impl_parameters -> .)
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    function_impl_parameters       shift and go to state 46
    data_type                      shift and go to state 47

state 13

    (9) function_prototype_start -> function_ret_type function_name .

    open_parenthesise reduce using rule 9 (function_prototype_start -> function_ret_type function_name .)


state 14

    (91) function_name -> name .

    open_parenthesise reduce using rule 91 (function_name -> name .)


state 15

    (15) function_impl -> function_prototype open_curly_brackets code_block . close_curly_brackets
    (19) code_block -> code_block . statement
    (21) statement -> . basic_block_command semicolon
    (22) statement -> . block
    (23) basic_block_command -> . def_var
    (24) basic_block_command -> . def_array
    (25) basic_block_command -> . int_assignment
    (26) basic_block_command -> . print_statement
    (27) basic_block_command -> . read_line_statement
    (28) basic_block_command -> . exit_statement
    (29) basic_block_command -> . function_call
    (30) basic_block_command -> . return_statement
    (31) block -> . if_statement
    (32) block -> . while_statement
    (58) def_var -> . data_type new_var_name
    (59) def_var -> . data_type new_var_name equals_operator value
    (60) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (62) int_assignment -> . dest_var equals_operator value
    (94) print_statement -> . print_value_statement
    (95) print_statement -> . print_string_statement
    (96) print_statement -> . print_array_statement
    (93) read_line_statement -> . read_line array_name comma simple_int_value
    (92) exit_statement -> . exit int_expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (52) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (53) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (55) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword
    (66) dest_var -> . var_name
    (67) dest_var -> . array_cell
    (98) print_value_statement -> . print value
    (99) print_string_statement -> . print string
    (97) print_array_statement -> . print_array array_name
    (91) function_name -> . name
    (87) var_name -> . name
    (61) array_cell -> . array_name open_brackets value close_brackets
    (88) array_name -> . name

    close_curly_brackets shift and go to state 48
    read_line       shift and go to state 34
    exit            shift and go to state 36
    return          shift and go to state 38
    if_keyword      shift and go to state 39
    while_keyword   shift and go to state 40
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 43
    print_array     shift and go to state 44
    name            shift and go to state 45

    statement                      shift and go to state 49
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    if_statement                   shift and go to state 27
    while_statement                shift and go to state 28
    data_type                      shift and go to state 29
    dest_var                       shift and go to state 30
    print_value_statement          shift and go to state 31
    print_string_statement         shift and go to state 32
    print_array_statement          shift and go to state 33
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37
    var_name                       shift and go to state 41
    array_cell                     shift and go to state 42

state 16

    (18) code_block -> statement .

    close_curly_brackets reduce using rule 18 (code_block -> statement .)
    read_line       reduce using rule 18 (code_block -> statement .)
    exit            reduce using rule 18 (code_block -> statement .)
    return          reduce using rule 18 (code_block -> statement .)
    if_keyword      reduce using rule 18 (code_block -> statement .)
    while_keyword   reduce using rule 18 (code_block -> statement .)
    int_32_keyword  reduce using rule 18 (code_block -> statement .)
    char_keyword    reduce using rule 18 (code_block -> statement .)
    print           reduce using rule 18 (code_block -> statement .)
    print_array     reduce using rule 18 (code_block -> statement .)
    name            reduce using rule 18 (code_block -> statement .)


state 17

    (21) statement -> basic_block_command . semicolon

    semicolon       shift and go to state 50


state 18

    (22) statement -> block .

    close_curly_brackets reduce using rule 22 (statement -> block .)
    read_line       reduce using rule 22 (statement -> block .)
    exit            reduce using rule 22 (statement -> block .)
    return          reduce using rule 22 (statement -> block .)
    if_keyword      reduce using rule 22 (statement -> block .)
    while_keyword   reduce using rule 22 (statement -> block .)
    int_32_keyword  reduce using rule 22 (statement -> block .)
    char_keyword    reduce using rule 22 (statement -> block .)
    print           reduce using rule 22 (statement -> block .)
    print_array     reduce using rule 22 (statement -> block .)
    name            reduce using rule 22 (statement -> block .)


state 19

    (23) basic_block_command -> def_var .

    semicolon       reduce using rule 23 (basic_block_command -> def_var .)


state 20

    (24) basic_block_command -> def_array .

    semicolon       reduce using rule 24 (basic_block_command -> def_array .)


state 21

    (25) basic_block_command -> int_assignment .

    semicolon       reduce using rule 25 (basic_block_command -> int_assignment .)


state 22

    (26) basic_block_command -> print_statement .

    semicolon       reduce using rule 26 (basic_block_command -> print_statement .)


state 23

    (27) basic_block_command -> read_line_statement .

    semicolon       reduce using rule 27 (basic_block_command -> read_line_statement .)


state 24

    (28) basic_block_command -> exit_statement .

    semicolon       reduce using rule 28 (basic_block_command -> exit_statement .)


state 25

    (29) basic_block_command -> function_call .

    semicolon       reduce using rule 29 (basic_block_command -> function_call .)


state 26

    (30) basic_block_command -> return_statement .

    semicolon       reduce using rule 30 (basic_block_command -> return_statement .)


state 27

    (31) block -> if_statement .

    close_curly_brackets reduce using rule 31 (block -> if_statement .)
    read_line       reduce using rule 31 (block -> if_statement .)
    exit            reduce using rule 31 (block -> if_statement .)
    return          reduce using rule 31 (block -> if_statement .)
    if_keyword      reduce using rule 31 (block -> if_statement .)
    while_keyword   reduce using rule 31 (block -> if_statement .)
    int_32_keyword  reduce using rule 31 (block -> if_statement .)
    char_keyword    reduce using rule 31 (block -> if_statement .)
    print           reduce using rule 31 (block -> if_statement .)
    print_array     reduce using rule 31 (block -> if_statement .)
    name            reduce using rule 31 (block -> if_statement .)


state 28

    (32) block -> while_statement .

    close_curly_brackets reduce using rule 32 (block -> while_statement .)
    read_line       reduce using rule 32 (block -> while_statement .)
    exit            reduce using rule 32 (block -> while_statement .)
    return          reduce using rule 32 (block -> while_statement .)
    if_keyword      reduce using rule 32 (block -> while_statement .)
    while_keyword   reduce using rule 32 (block -> while_statement .)
    int_32_keyword  reduce using rule 32 (block -> while_statement .)
    char_keyword    reduce using rule 32 (block -> while_statement .)
    print           reduce using rule 32 (block -> while_statement .)
    print_array     reduce using rule 32 (block -> while_statement .)
    name            reduce using rule 32 (block -> while_statement .)


state 29

    (58) def_var -> data_type . new_var_name
    (59) def_var -> data_type . new_var_name equals_operator value
    (60) def_array -> data_type . new_var_name open_brackets simple_int_value close_brackets
    (90) new_var_name -> . name

    name            shift and go to state 52

    new_var_name                   shift and go to state 51

state 30

    (62) int_assignment -> dest_var . equals_operator value

    equals_operator shift and go to state 53


state 31

    (94) print_statement -> print_value_statement .

    semicolon       reduce using rule 94 (print_statement -> print_value_statement .)


state 32

    (95) print_statement -> print_string_statement .

    semicolon       reduce using rule 95 (print_statement -> print_string_statement .)


state 33

    (96) print_statement -> print_array_statement .

    semicolon       reduce using rule 96 (print_statement -> print_array_statement .)


state 34

    (93) read_line_statement -> read_line . array_name comma simple_int_value
    (88) array_name -> . name

    name            shift and go to state 55

    array_name                     shift and go to state 54

state 35

    (61) array_cell -> array_name . open_brackets value close_brackets

    open_brackets   shift and go to state 56


state 36

    (92) exit_statement -> exit . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    int_expression                 shift and go to state 57
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 37

    (14) function_call -> function_name . open_parenthesise function_call_parameters close_parenthesise

    open_parenthesise shift and go to state 74


state 38

    (3) return_statement -> return . return_value
    (4) return_value -> . value
    (5) return_value -> .
    (68) value -> . int_value
    (65) int_value -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    semicolon       reduce using rule 5 (return_value -> .)
    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    return_value                   shift and go to state 75
    value                          shift and go to state 76
    int_value                      shift and go to state 77
    int_expression                 shift and go to state 78
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 39

    (52) if_statement -> if_keyword . open_parenthesise condition close_parenthesise scope else_statement
    (53) if_statement -> if_keyword . open_parenthesise condition close_parenthesise scope

    open_parenthesise shift and go to state 79


state 40

    (55) while_statement -> while_keyword . open_parenthesise condition close_parenthesise scope

    open_parenthesise shift and go to state 80


state 41

    (66) dest_var -> var_name .

    equals_operator reduce using rule 66 (dest_var -> var_name .)


state 42

    (67) dest_var -> array_cell .

    equals_operator reduce using rule 67 (dest_var -> array_cell .)


state 43

    (98) print_value_statement -> print . value
    (99) print_string_statement -> print . string
    (68) value -> . int_value
    (65) int_value -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    string          shift and go to state 82
    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    value                          shift and go to state 81
    int_value                      shift and go to state 77
    int_expression                 shift and go to state 78
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 44

    (97) print_array_statement -> print_array . array_name
    (88) array_name -> . name

    name            shift and go to state 55

    array_name                     shift and go to state 83

state 45

    (91) function_name -> name .
    (87) var_name -> name .
    (88) array_name -> name .

    open_parenthesise reduce using rule 91 (function_name -> name .)
    equals_operator reduce using rule 87 (var_name -> name .)
    open_brackets   reduce using rule 88 (array_name -> name .)


state 46

    (10) function_prototype -> function_prototype_start open_parenthesise function_impl_parameters . close_parenthesise
    (8) function_impl_parameters -> function_impl_parameters . comma data_type new_function_parameter_name

    close_parenthesise shift and go to state 84
    comma           shift and go to state 85


state 47

    (7) function_impl_parameters -> data_type . new_function_parameter_name
    (89) new_function_parameter_name -> . name

    name            shift and go to state 87

    new_function_parameter_name    shift and go to state 86

state 48

    (15) function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .

    void_keyword    reduce using rule 15 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)
    int_32_keyword  reduce using rule 15 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)
    char_keyword    reduce using rule 15 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)
    $end            reduce using rule 15 (function_impl -> function_prototype open_curly_brackets code_block close_curly_brackets .)


state 49

    (19) code_block -> code_block statement .

    close_curly_brackets reduce using rule 19 (code_block -> code_block statement .)
    read_line       reduce using rule 19 (code_block -> code_block statement .)
    exit            reduce using rule 19 (code_block -> code_block statement .)
    return          reduce using rule 19 (code_block -> code_block statement .)
    if_keyword      reduce using rule 19 (code_block -> code_block statement .)
    while_keyword   reduce using rule 19 (code_block -> code_block statement .)
    int_32_keyword  reduce using rule 19 (code_block -> code_block statement .)
    char_keyword    reduce using rule 19 (code_block -> code_block statement .)
    print           reduce using rule 19 (code_block -> code_block statement .)
    print_array     reduce using rule 19 (code_block -> code_block statement .)
    name            reduce using rule 19 (code_block -> code_block statement .)


state 50

    (21) statement -> basic_block_command semicolon .

    close_curly_brackets reduce using rule 21 (statement -> basic_block_command semicolon .)
    read_line       reduce using rule 21 (statement -> basic_block_command semicolon .)
    exit            reduce using rule 21 (statement -> basic_block_command semicolon .)
    return          reduce using rule 21 (statement -> basic_block_command semicolon .)
    if_keyword      reduce using rule 21 (statement -> basic_block_command semicolon .)
    while_keyword   reduce using rule 21 (statement -> basic_block_command semicolon .)
    int_32_keyword  reduce using rule 21 (statement -> basic_block_command semicolon .)
    char_keyword    reduce using rule 21 (statement -> basic_block_command semicolon .)
    print           reduce using rule 21 (statement -> basic_block_command semicolon .)
    print_array     reduce using rule 21 (statement -> basic_block_command semicolon .)
    name            reduce using rule 21 (statement -> basic_block_command semicolon .)


state 51

    (58) def_var -> data_type new_var_name .
    (59) def_var -> data_type new_var_name . equals_operator value
    (60) def_array -> data_type new_var_name . open_brackets simple_int_value close_brackets

    semicolon       reduce using rule 58 (def_var -> data_type new_var_name .)
    equals_operator shift and go to state 88
    open_brackets   shift and go to state 89


state 52

    (90) new_var_name -> name .

    equals_operator reduce using rule 90 (new_var_name -> name .)
    open_brackets   reduce using rule 90 (new_var_name -> name .)
    semicolon       reduce using rule 90 (new_var_name -> name .)


state 53

    (62) int_assignment -> dest_var equals_operator . value
    (68) value -> . int_value
    (65) int_value -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    value                          shift and go to state 90
    int_value                      shift and go to state 77
    int_expression                 shift and go to state 78
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 54

    (93) read_line_statement -> read_line array_name . comma simple_int_value

    comma           shift and go to state 91


state 55

    (88) array_name -> name .

    comma           reduce using rule 88 (array_name -> name .)
    semicolon       reduce using rule 88 (array_name -> name .)


state 56

    (61) array_cell -> array_name open_brackets . value close_brackets
    (68) value -> . int_value
    (65) int_value -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    array_name                     shift and go to state 35
    value                          shift and go to state 92
    int_value                      shift and go to state 77
    int_expression                 shift and go to state 78
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 57

    (92) exit_statement -> exit int_expression .
    (80) expression -> int_expression .

    semicolon       reduce using rule 92 (exit_statement -> exit int_expression .)
    add_operator    reduce using rule 80 (expression -> int_expression .)
    sub_operator    reduce using rule 80 (expression -> int_expression .)
    mul_operator    reduce using rule 80 (expression -> int_expression .)
    dev_operator    reduce using rule 80 (expression -> int_expression .)
    dev_rest_operator reduce using rule 80 (expression -> int_expression .)


state 58

    (70) int_expression -> simple_int_value .

    semicolon       reduce using rule 70 (int_expression -> simple_int_value .)
    add_operator    reduce using rule 70 (int_expression -> simple_int_value .)
    sub_operator    reduce using rule 70 (int_expression -> simple_int_value .)
    mul_operator    reduce using rule 70 (int_expression -> simple_int_value .)
    dev_operator    reduce using rule 70 (int_expression -> simple_int_value .)
    dev_rest_operator reduce using rule 70 (int_expression -> simple_int_value .)
    close_brackets  reduce using rule 70 (int_expression -> simple_int_value .)
    close_parenthesise reduce using rule 70 (int_expression -> simple_int_value .)
    comma           reduce using rule 70 (int_expression -> simple_int_value .)
    less_operator   reduce using rule 70 (int_expression -> simple_int_value .)
    greater_operator reduce using rule 70 (int_expression -> simple_int_value .)
    equality_operator reduce using rule 70 (int_expression -> simple_int_value .)
    not_equals_operator reduce using rule 70 (int_expression -> simple_int_value .)
    and_operator    reduce using rule 70 (int_expression -> simple_int_value .)
    or_operator     reduce using rule 70 (int_expression -> simple_int_value .)


state 59

    (71) int_expression -> function_call_value .

    semicolon       reduce using rule 71 (int_expression -> function_call_value .)
    add_operator    reduce using rule 71 (int_expression -> function_call_value .)
    sub_operator    reduce using rule 71 (int_expression -> function_call_value .)
    mul_operator    reduce using rule 71 (int_expression -> function_call_value .)
    dev_operator    reduce using rule 71 (int_expression -> function_call_value .)
    dev_rest_operator reduce using rule 71 (int_expression -> function_call_value .)
    close_brackets  reduce using rule 71 (int_expression -> function_call_value .)
    close_parenthesise reduce using rule 71 (int_expression -> function_call_value .)
    comma           reduce using rule 71 (int_expression -> function_call_value .)
    less_operator   reduce using rule 71 (int_expression -> function_call_value .)
    greater_operator reduce using rule 71 (int_expression -> function_call_value .)
    equality_operator reduce using rule 71 (int_expression -> function_call_value .)
    not_equals_operator reduce using rule 71 (int_expression -> function_call_value .)
    and_operator    reduce using rule 71 (int_expression -> function_call_value .)
    or_operator     reduce using rule 71 (int_expression -> function_call_value .)


state 60

    (72) int_expression -> array_cell .

    semicolon       reduce using rule 72 (int_expression -> array_cell .)
    add_operator    reduce using rule 72 (int_expression -> array_cell .)
    sub_operator    reduce using rule 72 (int_expression -> array_cell .)
    mul_operator    reduce using rule 72 (int_expression -> array_cell .)
    dev_operator    reduce using rule 72 (int_expression -> array_cell .)
    dev_rest_operator reduce using rule 72 (int_expression -> array_cell .)
    close_brackets  reduce using rule 72 (int_expression -> array_cell .)
    close_parenthesise reduce using rule 72 (int_expression -> array_cell .)
    comma           reduce using rule 72 (int_expression -> array_cell .)
    less_operator   reduce using rule 72 (int_expression -> array_cell .)
    greater_operator reduce using rule 72 (int_expression -> array_cell .)
    equality_operator reduce using rule 72 (int_expression -> array_cell .)
    not_equals_operator reduce using rule 72 (int_expression -> array_cell .)
    and_operator    reduce using rule 72 (int_expression -> array_cell .)
    or_operator     reduce using rule 72 (int_expression -> array_cell .)


state 61

    (73) int_expression -> int_expression_in_parenthesise .

    semicolon       reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    add_operator    reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    sub_operator    reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    mul_operator    reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    dev_operator    reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    dev_rest_operator reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    close_brackets  reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    close_parenthesise reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    comma           reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    less_operator   reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    greater_operator reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    equality_operator reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    not_equals_operator reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    and_operator    reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)
    or_operator     reduce using rule 73 (int_expression -> int_expression_in_parenthesise .)


state 62

    (74) int_expression -> var_name .

    semicolon       reduce using rule 74 (int_expression -> var_name .)
    add_operator    reduce using rule 74 (int_expression -> var_name .)
    sub_operator    reduce using rule 74 (int_expression -> var_name .)
    mul_operator    reduce using rule 74 (int_expression -> var_name .)
    dev_operator    reduce using rule 74 (int_expression -> var_name .)
    dev_rest_operator reduce using rule 74 (int_expression -> var_name .)
    close_brackets  reduce using rule 74 (int_expression -> var_name .)
    close_parenthesise reduce using rule 74 (int_expression -> var_name .)
    comma           reduce using rule 74 (int_expression -> var_name .)
    less_operator   reduce using rule 74 (int_expression -> var_name .)
    greater_operator reduce using rule 74 (int_expression -> var_name .)
    equality_operator reduce using rule 74 (int_expression -> var_name .)
    not_equals_operator reduce using rule 74 (int_expression -> var_name .)
    and_operator    reduce using rule 74 (int_expression -> var_name .)
    or_operator     reduce using rule 74 (int_expression -> var_name .)


state 63

    (75) int_expression -> add_expression .

    semicolon       reduce using rule 75 (int_expression -> add_expression .)
    add_operator    reduce using rule 75 (int_expression -> add_expression .)
    sub_operator    reduce using rule 75 (int_expression -> add_expression .)
    mul_operator    reduce using rule 75 (int_expression -> add_expression .)
    dev_operator    reduce using rule 75 (int_expression -> add_expression .)
    dev_rest_operator reduce using rule 75 (int_expression -> add_expression .)
    close_brackets  reduce using rule 75 (int_expression -> add_expression .)
    close_parenthesise reduce using rule 75 (int_expression -> add_expression .)
    comma           reduce using rule 75 (int_expression -> add_expression .)
    less_operator   reduce using rule 75 (int_expression -> add_expression .)
    greater_operator reduce using rule 75 (int_expression -> add_expression .)
    equality_operator reduce using rule 75 (int_expression -> add_expression .)
    not_equals_operator reduce using rule 75 (int_expression -> add_expression .)
    and_operator    reduce using rule 75 (int_expression -> add_expression .)
    or_operator     reduce using rule 75 (int_expression -> add_expression .)


state 64

    (76) int_expression -> sub_expression .

    semicolon       reduce using rule 76 (int_expression -> sub_expression .)
    add_operator    reduce using rule 76 (int_expression -> sub_expression .)
    sub_operator    reduce using rule 76 (int_expression -> sub_expression .)
    mul_operator    reduce using rule 76 (int_expression -> sub_expression .)
    dev_operator    reduce using rule 76 (int_expression -> sub_expression .)
    dev_rest_operator reduce using rule 76 (int_expression -> sub_expression .)
    close_brackets  reduce using rule 76 (int_expression -> sub_expression .)
    close_parenthesise reduce using rule 76 (int_expression -> sub_expression .)
    comma           reduce using rule 76 (int_expression -> sub_expression .)
    less_operator   reduce using rule 76 (int_expression -> sub_expression .)
    greater_operator reduce using rule 76 (int_expression -> sub_expression .)
    equality_operator reduce using rule 76 (int_expression -> sub_expression .)
    not_equals_operator reduce using rule 76 (int_expression -> sub_expression .)
    and_operator    reduce using rule 76 (int_expression -> sub_expression .)
    or_operator     reduce using rule 76 (int_expression -> sub_expression .)


state 65

    (77) int_expression -> mul_expression .

    semicolon       reduce using rule 77 (int_expression -> mul_expression .)
    add_operator    reduce using rule 77 (int_expression -> mul_expression .)
    sub_operator    reduce using rule 77 (int_expression -> mul_expression .)
    mul_operator    reduce using rule 77 (int_expression -> mul_expression .)
    dev_operator    reduce using rule 77 (int_expression -> mul_expression .)
    dev_rest_operator reduce using rule 77 (int_expression -> mul_expression .)
    close_brackets  reduce using rule 77 (int_expression -> mul_expression .)
    close_parenthesise reduce using rule 77 (int_expression -> mul_expression .)
    comma           reduce using rule 77 (int_expression -> mul_expression .)
    less_operator   reduce using rule 77 (int_expression -> mul_expression .)
    greater_operator reduce using rule 77 (int_expression -> mul_expression .)
    equality_operator reduce using rule 77 (int_expression -> mul_expression .)
    not_equals_operator reduce using rule 77 (int_expression -> mul_expression .)
    and_operator    reduce using rule 77 (int_expression -> mul_expression .)
    or_operator     reduce using rule 77 (int_expression -> mul_expression .)


state 66

    (78) int_expression -> dev_expression .

    semicolon       reduce using rule 78 (int_expression -> dev_expression .)
    add_operator    reduce using rule 78 (int_expression -> dev_expression .)
    sub_operator    reduce using rule 78 (int_expression -> dev_expression .)
    mul_operator    reduce using rule 78 (int_expression -> dev_expression .)
    dev_operator    reduce using rule 78 (int_expression -> dev_expression .)
    dev_rest_operator reduce using rule 78 (int_expression -> dev_expression .)
    close_brackets  reduce using rule 78 (int_expression -> dev_expression .)
    close_parenthesise reduce using rule 78 (int_expression -> dev_expression .)
    comma           reduce using rule 78 (int_expression -> dev_expression .)
    less_operator   reduce using rule 78 (int_expression -> dev_expression .)
    greater_operator reduce using rule 78 (int_expression -> dev_expression .)
    equality_operator reduce using rule 78 (int_expression -> dev_expression .)
    not_equals_operator reduce using rule 78 (int_expression -> dev_expression .)
    and_operator    reduce using rule 78 (int_expression -> dev_expression .)
    or_operator     reduce using rule 78 (int_expression -> dev_expression .)


state 67

    (79) int_expression -> dev_rest_expression .

    semicolon       reduce using rule 79 (int_expression -> dev_rest_expression .)
    add_operator    reduce using rule 79 (int_expression -> dev_rest_expression .)
    sub_operator    reduce using rule 79 (int_expression -> dev_rest_expression .)
    mul_operator    reduce using rule 79 (int_expression -> dev_rest_expression .)
    dev_operator    reduce using rule 79 (int_expression -> dev_rest_expression .)
    dev_rest_operator reduce using rule 79 (int_expression -> dev_rest_expression .)
    close_brackets  reduce using rule 79 (int_expression -> dev_rest_expression .)
    close_parenthesise reduce using rule 79 (int_expression -> dev_rest_expression .)
    comma           reduce using rule 79 (int_expression -> dev_rest_expression .)
    less_operator   reduce using rule 79 (int_expression -> dev_rest_expression .)
    greater_operator reduce using rule 79 (int_expression -> dev_rest_expression .)
    equality_operator reduce using rule 79 (int_expression -> dev_rest_expression .)
    not_equals_operator reduce using rule 79 (int_expression -> dev_rest_expression .)
    and_operator    reduce using rule 79 (int_expression -> dev_rest_expression .)
    or_operator     reduce using rule 79 (int_expression -> dev_rest_expression .)


state 68

    (63) simple_int_value -> int_32_value .

    semicolon       reduce using rule 63 (simple_int_value -> int_32_value .)
    add_operator    reduce using rule 63 (simple_int_value -> int_32_value .)
    sub_operator    reduce using rule 63 (simple_int_value -> int_32_value .)
    mul_operator    reduce using rule 63 (simple_int_value -> int_32_value .)
    dev_operator    reduce using rule 63 (simple_int_value -> int_32_value .)
    dev_rest_operator reduce using rule 63 (simple_int_value -> int_32_value .)
    close_brackets  reduce using rule 63 (simple_int_value -> int_32_value .)
    close_parenthesise reduce using rule 63 (simple_int_value -> int_32_value .)
    comma           reduce using rule 63 (simple_int_value -> int_32_value .)
    less_operator   reduce using rule 63 (simple_int_value -> int_32_value .)
    greater_operator reduce using rule 63 (simple_int_value -> int_32_value .)
    equality_operator reduce using rule 63 (simple_int_value -> int_32_value .)
    not_equals_operator reduce using rule 63 (simple_int_value -> int_32_value .)
    and_operator    reduce using rule 63 (simple_int_value -> int_32_value .)
    or_operator     reduce using rule 63 (simple_int_value -> int_32_value .)


state 69

    (64) simple_int_value -> char_value .

    semicolon       reduce using rule 64 (simple_int_value -> char_value .)
    add_operator    reduce using rule 64 (simple_int_value -> char_value .)
    sub_operator    reduce using rule 64 (simple_int_value -> char_value .)
    mul_operator    reduce using rule 64 (simple_int_value -> char_value .)
    dev_operator    reduce using rule 64 (simple_int_value -> char_value .)
    dev_rest_operator reduce using rule 64 (simple_int_value -> char_value .)
    close_brackets  reduce using rule 64 (simple_int_value -> char_value .)
    close_parenthesise reduce using rule 64 (simple_int_value -> char_value .)
    comma           reduce using rule 64 (simple_int_value -> char_value .)
    less_operator   reduce using rule 64 (simple_int_value -> char_value .)
    greater_operator reduce using rule 64 (simple_int_value -> char_value .)
    equality_operator reduce using rule 64 (simple_int_value -> char_value .)
    not_equals_operator reduce using rule 64 (simple_int_value -> char_value .)
    and_operator    reduce using rule 64 (simple_int_value -> char_value .)
    or_operator     reduce using rule 64 (simple_int_value -> char_value .)


state 70

    (69) function_call_value -> function_call .

    semicolon       reduce using rule 69 (function_call_value -> function_call .)
    add_operator    reduce using rule 69 (function_call_value -> function_call .)
    sub_operator    reduce using rule 69 (function_call_value -> function_call .)
    mul_operator    reduce using rule 69 (function_call_value -> function_call .)
    dev_operator    reduce using rule 69 (function_call_value -> function_call .)
    dev_rest_operator reduce using rule 69 (function_call_value -> function_call .)
    close_brackets  reduce using rule 69 (function_call_value -> function_call .)
    close_parenthesise reduce using rule 69 (function_call_value -> function_call .)
    comma           reduce using rule 69 (function_call_value -> function_call .)
    less_operator   reduce using rule 69 (function_call_value -> function_call .)
    greater_operator reduce using rule 69 (function_call_value -> function_call .)
    equality_operator reduce using rule 69 (function_call_value -> function_call .)
    not_equals_operator reduce using rule 69 (function_call_value -> function_call .)
    and_operator    reduce using rule 69 (function_call_value -> function_call .)
    or_operator     reduce using rule 69 (function_call_value -> function_call .)


state 71

    (81) int_expression_in_parenthesise -> open_parenthesise . int_expression close_parenthesise
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    int_expression                 shift and go to state 93
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 72

    (87) var_name -> name .
    (88) array_name -> name .
    (91) function_name -> name .

    semicolon       reduce using rule 87 (var_name -> name .)
    add_operator    reduce using rule 87 (var_name -> name .)
    sub_operator    reduce using rule 87 (var_name -> name .)
    mul_operator    reduce using rule 87 (var_name -> name .)
    dev_operator    reduce using rule 87 (var_name -> name .)
    dev_rest_operator reduce using rule 87 (var_name -> name .)
    close_brackets  reduce using rule 87 (var_name -> name .)
    close_parenthesise reduce using rule 87 (var_name -> name .)
    comma           reduce using rule 87 (var_name -> name .)
    less_operator   reduce using rule 87 (var_name -> name .)
    greater_operator reduce using rule 87 (var_name -> name .)
    equality_operator reduce using rule 87 (var_name -> name .)
    not_equals_operator reduce using rule 87 (var_name -> name .)
    and_operator    reduce using rule 87 (var_name -> name .)
    or_operator     reduce using rule 87 (var_name -> name .)
    open_brackets   reduce using rule 88 (array_name -> name .)
    open_parenthesise reduce using rule 91 (function_name -> name .)


state 73

    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    add_operator    shift and go to state 94
    sub_operator    shift and go to state 95
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98


state 74

    (14) function_call -> function_name open_parenthesise . function_call_parameters close_parenthesise
    (11) function_call_parameters -> .
    (12) function_call_parameters -> . value
    (13) function_call_parameters -> . function_call_parameters comma value
    (68) value -> . int_value
    (65) int_value -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    close_parenthesise reduce using rule 11 (function_call_parameters -> .)
    comma           reduce using rule 11 (function_call_parameters -> .)
    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    function_name                  shift and go to state 37
    function_call_parameters       shift and go to state 99
    value                          shift and go to state 100
    int_value                      shift and go to state 77
    int_expression                 shift and go to state 78
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73

state 75

    (3) return_statement -> return return_value .

    semicolon       reduce using rule 3 (return_statement -> return return_value .)


state 76

    (4) return_value -> value .

    semicolon       reduce using rule 4 (return_value -> value .)


state 77

    (68) value -> int_value .

    semicolon       reduce using rule 68 (value -> int_value .)
    close_brackets  reduce using rule 68 (value -> int_value .)
    close_parenthesise reduce using rule 68 (value -> int_value .)
    comma           reduce using rule 68 (value -> int_value .)


state 78

    (65) int_value -> int_expression .
    (80) expression -> int_expression .

    semicolon       reduce using rule 65 (int_value -> int_expression .)
    close_brackets  reduce using rule 65 (int_value -> int_expression .)
    close_parenthesise reduce using rule 65 (int_value -> int_expression .)
    comma           reduce using rule 65 (int_value -> int_expression .)
    add_operator    reduce using rule 80 (expression -> int_expression .)
    sub_operator    reduce using rule 80 (expression -> int_expression .)
    mul_operator    reduce using rule 80 (expression -> int_expression .)
    dev_operator    reduce using rule 80 (expression -> int_expression .)
    dev_rest_operator reduce using rule 80 (expression -> int_expression .)


state 79

    (52) if_statement -> if_keyword open_parenthesise . condition close_parenthesise scope else_statement
    (53) if_statement -> if_keyword open_parenthesise . condition close_parenthesise scope
    (36) condition -> . simple_condition
    (37) condition -> . complex_condition
    (38) simple_condition -> . les_condition
    (39) simple_condition -> . grater_condition
    (40) simple_condition -> . equality_condition
    (41) simple_condition -> . not_equals_condition
    (42) simple_condition -> . condition_in_parenthesise
    (43) complex_condition -> . and_condition
    (44) complex_condition -> . or_condition
    (48) les_condition -> . expression less_operator expression
    (49) grater_condition -> . expression greater_operator expression
    (50) equality_condition -> . expression equality_operator expression
    (51) not_equals_condition -> . expression not_equals_operator expression
    (47) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (46) and_condition -> . condition and_operator simple_condition
    (45) or_condition -> . condition or_operator simple_condition
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    open_parenthesise shift and go to state 101
    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    name            shift and go to state 72

    condition                      shift and go to state 102
    simple_condition               shift and go to state 103
    complex_condition              shift and go to state 104
    les_condition                  shift and go to state 105
    grater_condition               shift and go to state 106
    equality_condition             shift and go to state 107
    not_equals_condition           shift and go to state 108
    condition_in_parenthesise      shift and go to state 109
    and_condition                  shift and go to state 110
    or_condition                   shift and go to state 111
    expression                     shift and go to state 112
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 80

    (55) while_statement -> while_keyword open_parenthesise . condition close_parenthesise scope
    (36) condition -> . simple_condition
    (37) condition -> . complex_condition
    (38) simple_condition -> . les_condition
    (39) simple_condition -> . grater_condition
    (40) simple_condition -> . equality_condition
    (41) simple_condition -> . not_equals_condition
    (42) simple_condition -> . condition_in_parenthesise
    (43) complex_condition -> . and_condition
    (44) complex_condition -> . or_condition
    (48) les_condition -> . expression less_operator expression
    (49) grater_condition -> . expression greater_operator expression
    (50) equality_condition -> . expression equality_operator expression
    (51) not_equals_condition -> . expression not_equals_operator expression
    (47) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (46) and_condition -> . condition and_operator simple_condition
    (45) or_condition -> . condition or_operator simple_condition
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    open_parenthesise shift and go to state 101
    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    name            shift and go to state 72

    condition                      shift and go to state 114
    simple_condition               shift and go to state 103
    complex_condition              shift and go to state 104
    les_condition                  shift and go to state 105
    grater_condition               shift and go to state 106
    equality_condition             shift and go to state 107
    not_equals_condition           shift and go to state 108
    condition_in_parenthesise      shift and go to state 109
    and_condition                  shift and go to state 110
    or_condition                   shift and go to state 111
    expression                     shift and go to state 112
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 81

    (98) print_value_statement -> print value .

    semicolon       reduce using rule 98 (print_value_statement -> print value .)


state 82

    (99) print_string_statement -> print string .

    semicolon       reduce using rule 99 (print_string_statement -> print string .)


state 83

    (97) print_array_statement -> print_array array_name .

    semicolon       reduce using rule 97 (print_array_statement -> print_array array_name .)


state 84

    (10) function_prototype -> function_prototype_start open_parenthesise function_impl_parameters close_parenthesise .

    open_curly_brackets reduce using rule 10 (function_prototype -> function_prototype_start open_parenthesise function_impl_parameters close_parenthesise .)


state 85

    (8) function_impl_parameters -> function_impl_parameters comma . data_type new_function_parameter_name
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword

    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9

    data_type                      shift and go to state 115

state 86

    (7) function_impl_parameters -> data_type new_function_parameter_name .

    close_parenthesise reduce using rule 7 (function_impl_parameters -> data_type new_function_parameter_name .)
    comma           reduce using rule 7 (function_impl_parameters -> data_type new_function_parameter_name .)


state 87

    (89) new_function_parameter_name -> name .

    close_parenthesise reduce using rule 89 (new_function_parameter_name -> name .)
    comma           reduce using rule 89 (new_function_parameter_name -> name .)


state 88

    (59) def_var -> data_type new_var_name equals_operator . value
    (68) value -> . int_value
    (65) int_value -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    value                          shift and go to state 116
    int_value                      shift and go to state 77
    int_expression                 shift and go to state 78
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 89

    (60) def_array -> data_type new_var_name open_brackets . simple_int_value close_brackets
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69

    simple_int_value               shift and go to state 117

state 90

    (62) int_assignment -> dest_var equals_operator value .

    semicolon       reduce using rule 62 (int_assignment -> dest_var equals_operator value .)


state 91

    (93) read_line_statement -> read_line array_name comma . simple_int_value
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69

    simple_int_value               shift and go to state 118

state 92

    (61) array_cell -> array_name open_brackets value . close_brackets

    close_brackets  shift and go to state 119


state 93

    (81) int_expression_in_parenthesise -> open_parenthesise int_expression . close_parenthesise
    (80) expression -> int_expression .

    close_parenthesise shift and go to state 120
    add_operator    reduce using rule 80 (expression -> int_expression .)
    sub_operator    reduce using rule 80 (expression -> int_expression .)
    mul_operator    reduce using rule 80 (expression -> int_expression .)
    dev_operator    reduce using rule 80 (expression -> int_expression .)
    dev_rest_operator reduce using rule 80 (expression -> int_expression .)
    less_operator   reduce using rule 80 (expression -> int_expression .)
    greater_operator reduce using rule 80 (expression -> int_expression .)
    equality_operator reduce using rule 80 (expression -> int_expression .)
    not_equals_operator reduce using rule 80 (expression -> int_expression .)


state 94

    (82) add_expression -> expression add_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 121
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 95

    (83) sub_expression -> expression sub_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 122
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 96

    (84) mul_expression -> expression mul_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 123
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 97

    (85) dev_expression -> expression dev_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 124
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 98

    (86) dev_rest_expression -> expression dev_rest_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 125
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 99

    (14) function_call -> function_name open_parenthesise function_call_parameters . close_parenthesise
    (13) function_call_parameters -> function_call_parameters . comma value

    close_parenthesise shift and go to state 126
    comma           shift and go to state 127


state 100

    (12) function_call_parameters -> value .

    close_parenthesise reduce using rule 12 (function_call_parameters -> value .)
    comma           reduce using rule 12 (function_call_parameters -> value .)


state 101

    (47) condition_in_parenthesise -> open_parenthesise . condition close_parenthesise
    (81) int_expression_in_parenthesise -> open_parenthesise . int_expression close_parenthesise
    (36) condition -> . simple_condition
    (37) condition -> . complex_condition
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (38) simple_condition -> . les_condition
    (39) simple_condition -> . grater_condition
    (40) simple_condition -> . equality_condition
    (41) simple_condition -> . not_equals_condition
    (42) simple_condition -> . condition_in_parenthesise
    (43) complex_condition -> . and_condition
    (44) complex_condition -> . or_condition
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (48) les_condition -> . expression less_operator expression
    (49) grater_condition -> . expression greater_operator expression
    (50) equality_condition -> . expression equality_operator expression
    (51) not_equals_condition -> . expression not_equals_operator expression
    (47) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (46) and_condition -> . condition and_operator simple_condition
    (45) or_condition -> . condition or_operator simple_condition
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 128
    name            shift and go to state 72

    condition                      shift and go to state 129
    int_expression                 shift and go to state 93
    simple_condition               shift and go to state 103
    complex_condition              shift and go to state 104
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    les_condition                  shift and go to state 105
    grater_condition               shift and go to state 106
    equality_condition             shift and go to state 107
    not_equals_condition           shift and go to state 108
    condition_in_parenthesise      shift and go to state 109
    and_condition                  shift and go to state 110
    or_condition                   shift and go to state 111
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 130
    function_name                  shift and go to state 37

state 102

    (52) if_statement -> if_keyword open_parenthesise condition . close_parenthesise scope else_statement
    (53) if_statement -> if_keyword open_parenthesise condition . close_parenthesise scope
    (46) and_condition -> condition . and_operator simple_condition
    (45) or_condition -> condition . or_operator simple_condition

    close_parenthesise shift and go to state 131
    and_operator    shift and go to state 132
    or_operator     shift and go to state 133


state 103

    (36) condition -> simple_condition .

    close_parenthesise reduce using rule 36 (condition -> simple_condition .)
    and_operator    reduce using rule 36 (condition -> simple_condition .)
    or_operator     reduce using rule 36 (condition -> simple_condition .)


state 104

    (37) condition -> complex_condition .

    close_parenthesise reduce using rule 37 (condition -> complex_condition .)
    and_operator    reduce using rule 37 (condition -> complex_condition .)
    or_operator     reduce using rule 37 (condition -> complex_condition .)


state 105

    (38) simple_condition -> les_condition .

    close_parenthesise reduce using rule 38 (simple_condition -> les_condition .)
    and_operator    reduce using rule 38 (simple_condition -> les_condition .)
    or_operator     reduce using rule 38 (simple_condition -> les_condition .)


state 106

    (39) simple_condition -> grater_condition .

    close_parenthesise reduce using rule 39 (simple_condition -> grater_condition .)
    and_operator    reduce using rule 39 (simple_condition -> grater_condition .)
    or_operator     reduce using rule 39 (simple_condition -> grater_condition .)


state 107

    (40) simple_condition -> equality_condition .

    close_parenthesise reduce using rule 40 (simple_condition -> equality_condition .)
    and_operator    reduce using rule 40 (simple_condition -> equality_condition .)
    or_operator     reduce using rule 40 (simple_condition -> equality_condition .)


state 108

    (41) simple_condition -> not_equals_condition .

    close_parenthesise reduce using rule 41 (simple_condition -> not_equals_condition .)
    and_operator    reduce using rule 41 (simple_condition -> not_equals_condition .)
    or_operator     reduce using rule 41 (simple_condition -> not_equals_condition .)


state 109

    (42) simple_condition -> condition_in_parenthesise .

    close_parenthesise reduce using rule 42 (simple_condition -> condition_in_parenthesise .)
    and_operator    reduce using rule 42 (simple_condition -> condition_in_parenthesise .)
    or_operator     reduce using rule 42 (simple_condition -> condition_in_parenthesise .)


state 110

    (43) complex_condition -> and_condition .

    close_parenthesise reduce using rule 43 (complex_condition -> and_condition .)
    and_operator    reduce using rule 43 (complex_condition -> and_condition .)
    or_operator     reduce using rule 43 (complex_condition -> and_condition .)


state 111

    (44) complex_condition -> or_condition .

    close_parenthesise reduce using rule 44 (complex_condition -> or_condition .)
    and_operator    reduce using rule 44 (complex_condition -> or_condition .)
    or_operator     reduce using rule 44 (complex_condition -> or_condition .)


state 112

    (48) les_condition -> expression . less_operator expression
    (49) grater_condition -> expression . greater_operator expression
    (50) equality_condition -> expression . equality_operator expression
    (51) not_equals_condition -> expression . not_equals_operator expression
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    less_operator   shift and go to state 134
    greater_operator shift and go to state 135
    equality_operator shift and go to state 136
    not_equals_operator shift and go to state 137
    add_operator    shift and go to state 94
    sub_operator    shift and go to state 95
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98


state 113

    (80) expression -> int_expression .

    less_operator   reduce using rule 80 (expression -> int_expression .)
    greater_operator reduce using rule 80 (expression -> int_expression .)
    equality_operator reduce using rule 80 (expression -> int_expression .)
    not_equals_operator reduce using rule 80 (expression -> int_expression .)
    add_operator    reduce using rule 80 (expression -> int_expression .)
    sub_operator    reduce using rule 80 (expression -> int_expression .)
    mul_operator    reduce using rule 80 (expression -> int_expression .)
    dev_operator    reduce using rule 80 (expression -> int_expression .)
    dev_rest_operator reduce using rule 80 (expression -> int_expression .)
    semicolon       reduce using rule 80 (expression -> int_expression .)
    close_brackets  reduce using rule 80 (expression -> int_expression .)
    close_parenthesise reduce using rule 80 (expression -> int_expression .)
    comma           reduce using rule 80 (expression -> int_expression .)
    and_operator    reduce using rule 80 (expression -> int_expression .)
    or_operator     reduce using rule 80 (expression -> int_expression .)


state 114

    (55) while_statement -> while_keyword open_parenthesise condition . close_parenthesise scope
    (46) and_condition -> condition . and_operator simple_condition
    (45) or_condition -> condition . or_operator simple_condition

    close_parenthesise shift and go to state 138
    and_operator    shift and go to state 132
    or_operator     shift and go to state 133


state 115

    (8) function_impl_parameters -> function_impl_parameters comma data_type . new_function_parameter_name
    (89) new_function_parameter_name -> . name

    name            shift and go to state 87

    new_function_parameter_name    shift and go to state 139

state 116

    (59) def_var -> data_type new_var_name equals_operator value .

    semicolon       reduce using rule 59 (def_var -> data_type new_var_name equals_operator value .)


state 117

    (60) def_array -> data_type new_var_name open_brackets simple_int_value . close_brackets

    close_brackets  shift and go to state 140


state 118

    (93) read_line_statement -> read_line array_name comma simple_int_value .

    semicolon       reduce using rule 93 (read_line_statement -> read_line array_name comma simple_int_value .)


state 119

    (61) array_cell -> array_name open_brackets value close_brackets .

    equals_operator reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    semicolon       reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    add_operator    reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    sub_operator    reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    mul_operator    reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    dev_operator    reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    dev_rest_operator reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    close_brackets  reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    close_parenthesise reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    comma           reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    less_operator   reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    greater_operator reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    equality_operator reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    not_equals_operator reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    and_operator    reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)
    or_operator     reduce using rule 61 (array_cell -> array_name open_brackets value close_brackets .)


state 120

    (81) int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .

    semicolon       reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    add_operator    reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    sub_operator    reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    mul_operator    reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    dev_operator    reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    dev_rest_operator reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    close_brackets  reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    close_parenthesise reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    comma           reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    less_operator   reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    greater_operator reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    equality_operator reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    not_equals_operator reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    and_operator    reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)
    or_operator     reduce using rule 81 (int_expression_in_parenthesise -> open_parenthesise int_expression close_parenthesise .)


state 121

    (82) add_expression -> expression add_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 82 (add_expression -> expression add_operator expression .)
    add_operator    reduce using rule 82 (add_expression -> expression add_operator expression .)
    sub_operator    reduce using rule 82 (add_expression -> expression add_operator expression .)
    close_brackets  reduce using rule 82 (add_expression -> expression add_operator expression .)
    close_parenthesise reduce using rule 82 (add_expression -> expression add_operator expression .)
    comma           reduce using rule 82 (add_expression -> expression add_operator expression .)
    less_operator   reduce using rule 82 (add_expression -> expression add_operator expression .)
    greater_operator reduce using rule 82 (add_expression -> expression add_operator expression .)
    equality_operator reduce using rule 82 (add_expression -> expression add_operator expression .)
    not_equals_operator reduce using rule 82 (add_expression -> expression add_operator expression .)
    and_operator    reduce using rule 82 (add_expression -> expression add_operator expression .)
    or_operator     reduce using rule 82 (add_expression -> expression add_operator expression .)
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98

  ! mul_operator    [ reduce using rule 82 (add_expression -> expression add_operator expression .) ]
  ! dev_operator    [ reduce using rule 82 (add_expression -> expression add_operator expression .) ]
  ! dev_rest_operator [ reduce using rule 82 (add_expression -> expression add_operator expression .) ]
  ! add_operator    [ shift and go to state 94 ]
  ! sub_operator    [ shift and go to state 95 ]


state 122

    (83) sub_expression -> expression sub_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    add_operator    reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    sub_operator    reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    close_brackets  reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    close_parenthesise reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    comma           reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    less_operator   reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    greater_operator reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    equality_operator reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    not_equals_operator reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    and_operator    reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    or_operator     reduce using rule 83 (sub_expression -> expression sub_operator expression .)
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98

  ! mul_operator    [ reduce using rule 83 (sub_expression -> expression sub_operator expression .) ]
  ! dev_operator    [ reduce using rule 83 (sub_expression -> expression sub_operator expression .) ]
  ! dev_rest_operator [ reduce using rule 83 (sub_expression -> expression sub_operator expression .) ]
  ! add_operator    [ shift and go to state 94 ]
  ! sub_operator    [ shift and go to state 95 ]


state 123

    (84) mul_expression -> expression mul_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    add_operator    reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    sub_operator    reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    mul_operator    reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    dev_operator    reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    dev_rest_operator reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    close_brackets  reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    close_parenthesise reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    comma           reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    less_operator   reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    greater_operator reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    equality_operator reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    not_equals_operator reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    and_operator    reduce using rule 84 (mul_expression -> expression mul_operator expression .)
    or_operator     reduce using rule 84 (mul_expression -> expression mul_operator expression .)

  ! add_operator    [ shift and go to state 94 ]
  ! sub_operator    [ shift and go to state 95 ]
  ! mul_operator    [ shift and go to state 96 ]
  ! dev_operator    [ shift and go to state 97 ]
  ! dev_rest_operator [ shift and go to state 98 ]


state 124

    (85) dev_expression -> expression dev_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    add_operator    reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    sub_operator    reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    mul_operator    reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    dev_operator    reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    dev_rest_operator reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    close_brackets  reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    close_parenthesise reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    comma           reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    less_operator   reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    greater_operator reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    equality_operator reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    not_equals_operator reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    and_operator    reduce using rule 85 (dev_expression -> expression dev_operator expression .)
    or_operator     reduce using rule 85 (dev_expression -> expression dev_operator expression .)

  ! add_operator    [ shift and go to state 94 ]
  ! sub_operator    [ shift and go to state 95 ]
  ! mul_operator    [ shift and go to state 96 ]
  ! dev_operator    [ shift and go to state 97 ]
  ! dev_rest_operator [ shift and go to state 98 ]


state 125

    (86) dev_rest_expression -> expression dev_rest_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    semicolon       reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    add_operator    reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    sub_operator    reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    mul_operator    reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    dev_operator    reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    dev_rest_operator reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    close_brackets  reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    close_parenthesise reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    comma           reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    less_operator   reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    greater_operator reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    equality_operator reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    not_equals_operator reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    and_operator    reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)
    or_operator     reduce using rule 86 (dev_rest_expression -> expression dev_rest_operator expression .)

  ! add_operator    [ shift and go to state 94 ]
  ! sub_operator    [ shift and go to state 95 ]
  ! mul_operator    [ shift and go to state 96 ]
  ! dev_operator    [ shift and go to state 97 ]
  ! dev_rest_operator [ shift and go to state 98 ]


state 126

    (14) function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .

    semicolon       reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    add_operator    reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    sub_operator    reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    mul_operator    reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    dev_operator    reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    dev_rest_operator reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    close_brackets  reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    close_parenthesise reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    comma           reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    less_operator   reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    greater_operator reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    equality_operator reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    not_equals_operator reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    and_operator    reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)
    or_operator     reduce using rule 14 (function_call -> function_name open_parenthesise function_call_parameters close_parenthesise .)


state 127

    (13) function_call_parameters -> function_call_parameters comma . value
    (68) value -> . int_value
    (65) int_value -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    value                          shift and go to state 141
    int_value                      shift and go to state 77
    int_expression                 shift and go to state 78
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 73
    function_name                  shift and go to state 37

state 128

    (81) int_expression_in_parenthesise -> open_parenthesise . int_expression close_parenthesise
    (47) condition_in_parenthesise -> open_parenthesise . condition close_parenthesise
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (36) condition -> . simple_condition
    (37) condition -> . complex_condition
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (38) simple_condition -> . les_condition
    (39) simple_condition -> . grater_condition
    (40) simple_condition -> . equality_condition
    (41) simple_condition -> . not_equals_condition
    (42) simple_condition -> . condition_in_parenthesise
    (43) complex_condition -> . and_condition
    (44) complex_condition -> . or_condition
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (80) expression -> . int_expression
    (48) les_condition -> . expression less_operator expression
    (49) grater_condition -> . expression greater_operator expression
    (50) equality_condition -> . expression equality_operator expression
    (51) not_equals_condition -> . expression not_equals_operator expression
    (47) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (46) and_condition -> . condition and_operator simple_condition
    (45) or_condition -> . condition or_operator simple_condition
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 128
    name            shift and go to state 72

    int_expression                 shift and go to state 93
    condition                      shift and go to state 129
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    simple_condition               shift and go to state 103
    complex_condition              shift and go to state 104
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    expression                     shift and go to state 130
    les_condition                  shift and go to state 105
    grater_condition               shift and go to state 106
    equality_condition             shift and go to state 107
    not_equals_condition           shift and go to state 108
    condition_in_parenthesise      shift and go to state 109
    and_condition                  shift and go to state 110
    or_condition                   shift and go to state 111
    function_name                  shift and go to state 37

state 129

    (47) condition_in_parenthesise -> open_parenthesise condition . close_parenthesise
    (46) and_condition -> condition . and_operator simple_condition
    (45) or_condition -> condition . or_operator simple_condition

    close_parenthesise shift and go to state 142
    and_operator    shift and go to state 132
    or_operator     shift and go to state 133


state 130

    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression
    (48) les_condition -> expression . less_operator expression
    (49) grater_condition -> expression . greater_operator expression
    (50) equality_condition -> expression . equality_operator expression
    (51) not_equals_condition -> expression . not_equals_operator expression

    add_operator    shift and go to state 94
    sub_operator    shift and go to state 95
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98
    less_operator   shift and go to state 134
    greater_operator shift and go to state 135
    equality_operator shift and go to state 136
    not_equals_operator shift and go to state 137


state 131

    (52) if_statement -> if_keyword open_parenthesise condition close_parenthesise . scope else_statement
    (53) if_statement -> if_keyword open_parenthesise condition close_parenthesise . scope
    (35) scope -> . scope_start code_block scope_end
    (33) scope_start -> . open_curly_brackets

    open_curly_brackets shift and go to state 145

    scope                          shift and go to state 143
    scope_start                    shift and go to state 144

state 132

    (46) and_condition -> condition and_operator . simple_condition
    (38) simple_condition -> . les_condition
    (39) simple_condition -> . grater_condition
    (40) simple_condition -> . equality_condition
    (41) simple_condition -> . not_equals_condition
    (42) simple_condition -> . condition_in_parenthesise
    (48) les_condition -> . expression less_operator expression
    (49) grater_condition -> . expression greater_operator expression
    (50) equality_condition -> . expression equality_operator expression
    (51) not_equals_condition -> . expression not_equals_operator expression
    (47) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    open_parenthesise shift and go to state 101
    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    name            shift and go to state 72

    simple_condition               shift and go to state 146
    les_condition                  shift and go to state 105
    grater_condition               shift and go to state 106
    equality_condition             shift and go to state 107
    not_equals_condition           shift and go to state 108
    condition_in_parenthesise      shift and go to state 109
    expression                     shift and go to state 112
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 133

    (45) or_condition -> condition or_operator . simple_condition
    (38) simple_condition -> . les_condition
    (39) simple_condition -> . grater_condition
    (40) simple_condition -> . equality_condition
    (41) simple_condition -> . not_equals_condition
    (42) simple_condition -> . condition_in_parenthesise
    (48) les_condition -> . expression less_operator expression
    (49) grater_condition -> . expression greater_operator expression
    (50) equality_condition -> . expression equality_operator expression
    (51) not_equals_condition -> . expression not_equals_operator expression
    (47) condition_in_parenthesise -> . open_parenthesise condition close_parenthesise
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    open_parenthesise shift and go to state 101
    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    name            shift and go to state 72

    simple_condition               shift and go to state 147
    les_condition                  shift and go to state 105
    grater_condition               shift and go to state 106
    equality_condition             shift and go to state 107
    not_equals_condition           shift and go to state 108
    condition_in_parenthesise      shift and go to state 109
    expression                     shift and go to state 112
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 134

    (48) les_condition -> expression less_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 148
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 135

    (49) grater_condition -> expression greater_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 149
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 136

    (50) equality_condition -> expression equality_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 150
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 137

    (51) not_equals_condition -> expression not_equals_operator . expression
    (80) expression -> . int_expression
    (70) int_expression -> . simple_int_value
    (71) int_expression -> . function_call_value
    (72) int_expression -> . array_cell
    (73) int_expression -> . int_expression_in_parenthesise
    (74) int_expression -> . var_name
    (75) int_expression -> . add_expression
    (76) int_expression -> . sub_expression
    (77) int_expression -> . mul_expression
    (78) int_expression -> . dev_expression
    (79) int_expression -> . dev_rest_expression
    (63) simple_int_value -> . int_32_value
    (64) simple_int_value -> . char_value
    (69) function_call_value -> . function_call
    (61) array_cell -> . array_name open_brackets value close_brackets
    (81) int_expression_in_parenthesise -> . open_parenthesise int_expression close_parenthesise
    (87) var_name -> . name
    (82) add_expression -> . expression add_operator expression
    (83) sub_expression -> . expression sub_operator expression
    (84) mul_expression -> . expression mul_operator expression
    (85) dev_expression -> . expression dev_operator expression
    (86) dev_rest_expression -> . expression dev_rest_operator expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (88) array_name -> . name
    (91) function_name -> . name

    int_32_value    shift and go to state 68
    char_value      shift and go to state 69
    open_parenthesise shift and go to state 71
    name            shift and go to state 72

    expression                     shift and go to state 151
    int_expression                 shift and go to state 113
    simple_int_value               shift and go to state 58
    function_call_value            shift and go to state 59
    array_cell                     shift and go to state 60
    int_expression_in_parenthesise shift and go to state 61
    var_name                       shift and go to state 62
    add_expression                 shift and go to state 63
    sub_expression                 shift and go to state 64
    mul_expression                 shift and go to state 65
    dev_expression                 shift and go to state 66
    dev_rest_expression            shift and go to state 67
    function_call                  shift and go to state 70
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37

state 138

    (55) while_statement -> while_keyword open_parenthesise condition close_parenthesise . scope
    (35) scope -> . scope_start code_block scope_end
    (33) scope_start -> . open_curly_brackets

    open_curly_brackets shift and go to state 145

    scope                          shift and go to state 152
    scope_start                    shift and go to state 144

state 139

    (8) function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name .

    close_parenthesise reduce using rule 8 (function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name .)
    comma           reduce using rule 8 (function_impl_parameters -> function_impl_parameters comma data_type new_function_parameter_name .)


state 140

    (60) def_array -> data_type new_var_name open_brackets simple_int_value close_brackets .

    semicolon       reduce using rule 60 (def_array -> data_type new_var_name open_brackets simple_int_value close_brackets .)


state 141

    (13) function_call_parameters -> function_call_parameters comma value .

    close_parenthesise reduce using rule 13 (function_call_parameters -> function_call_parameters comma value .)
    comma           reduce using rule 13 (function_call_parameters -> function_call_parameters comma value .)


state 142

    (47) condition_in_parenthesise -> open_parenthesise condition close_parenthesise .

    close_parenthesise reduce using rule 47 (condition_in_parenthesise -> open_parenthesise condition close_parenthesise .)
    and_operator    reduce using rule 47 (condition_in_parenthesise -> open_parenthesise condition close_parenthesise .)
    or_operator     reduce using rule 47 (condition_in_parenthesise -> open_parenthesise condition close_parenthesise .)


state 143

    (52) if_statement -> if_keyword open_parenthesise condition close_parenthesise scope . else_statement
    (53) if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .
    (54) else_statement -> . else_keyword scope

    close_curly_brackets reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    read_line       reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    exit            reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    return          reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    if_keyword      reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    while_keyword   reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    int_32_keyword  reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    char_keyword    reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    print           reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    print_array     reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    name            reduce using rule 53 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope .)
    else_keyword    shift and go to state 154

    else_statement                 shift and go to state 153

state 144

    (35) scope -> scope_start . code_block scope_end
    (18) code_block -> . statement
    (19) code_block -> . code_block statement
    (20) code_block -> .
    (21) statement -> . basic_block_command semicolon
    (22) statement -> . block
    (23) basic_block_command -> . def_var
    (24) basic_block_command -> . def_array
    (25) basic_block_command -> . int_assignment
    (26) basic_block_command -> . print_statement
    (27) basic_block_command -> . read_line_statement
    (28) basic_block_command -> . exit_statement
    (29) basic_block_command -> . function_call
    (30) basic_block_command -> . return_statement
    (31) block -> . if_statement
    (32) block -> . while_statement
    (58) def_var -> . data_type new_var_name
    (59) def_var -> . data_type new_var_name equals_operator value
    (60) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (62) int_assignment -> . dest_var equals_operator value
    (94) print_statement -> . print_value_statement
    (95) print_statement -> . print_string_statement
    (96) print_statement -> . print_array_statement
    (93) read_line_statement -> . read_line array_name comma simple_int_value
    (92) exit_statement -> . exit int_expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (52) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (53) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (55) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword
    (66) dest_var -> . var_name
    (67) dest_var -> . array_cell
    (98) print_value_statement -> . print value
    (99) print_string_statement -> . print string
    (97) print_array_statement -> . print_array array_name
    (91) function_name -> . name
    (87) var_name -> . name
    (61) array_cell -> . array_name open_brackets value close_brackets
    (88) array_name -> . name

  ! shift/reduce conflict for read_line resolved as shift
  ! shift/reduce conflict for exit resolved as shift
  ! shift/reduce conflict for return resolved as shift
  ! shift/reduce conflict for if_keyword resolved as shift
  ! shift/reduce conflict for while_keyword resolved as shift
  ! shift/reduce conflict for int_32_keyword resolved as shift
  ! shift/reduce conflict for char_keyword resolved as shift
  ! shift/reduce conflict for print resolved as shift
  ! shift/reduce conflict for print_array resolved as shift
  ! shift/reduce conflict for name resolved as shift
    close_curly_brackets reduce using rule 20 (code_block -> .)
    read_line       shift and go to state 34
    exit            shift and go to state 36
    return          shift and go to state 38
    if_keyword      shift and go to state 39
    while_keyword   shift and go to state 40
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 43
    print_array     shift and go to state 44
    name            shift and go to state 45

  ! read_line       [ reduce using rule 20 (code_block -> .) ]
  ! exit            [ reduce using rule 20 (code_block -> .) ]
  ! return          [ reduce using rule 20 (code_block -> .) ]
  ! if_keyword      [ reduce using rule 20 (code_block -> .) ]
  ! while_keyword   [ reduce using rule 20 (code_block -> .) ]
  ! int_32_keyword  [ reduce using rule 20 (code_block -> .) ]
  ! char_keyword    [ reduce using rule 20 (code_block -> .) ]
  ! print           [ reduce using rule 20 (code_block -> .) ]
  ! print_array     [ reduce using rule 20 (code_block -> .) ]
  ! name            [ reduce using rule 20 (code_block -> .) ]

    code_block                     shift and go to state 155
    statement                      shift and go to state 16
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    if_statement                   shift and go to state 27
    while_statement                shift and go to state 28
    data_type                      shift and go to state 29
    dest_var                       shift and go to state 30
    print_value_statement          shift and go to state 31
    print_string_statement         shift and go to state 32
    print_array_statement          shift and go to state 33
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37
    var_name                       shift and go to state 41
    array_cell                     shift and go to state 42

state 145

    (33) scope_start -> open_curly_brackets .

    read_line       reduce using rule 33 (scope_start -> open_curly_brackets .)
    exit            reduce using rule 33 (scope_start -> open_curly_brackets .)
    return          reduce using rule 33 (scope_start -> open_curly_brackets .)
    if_keyword      reduce using rule 33 (scope_start -> open_curly_brackets .)
    while_keyword   reduce using rule 33 (scope_start -> open_curly_brackets .)
    int_32_keyword  reduce using rule 33 (scope_start -> open_curly_brackets .)
    char_keyword    reduce using rule 33 (scope_start -> open_curly_brackets .)
    print           reduce using rule 33 (scope_start -> open_curly_brackets .)
    print_array     reduce using rule 33 (scope_start -> open_curly_brackets .)
    name            reduce using rule 33 (scope_start -> open_curly_brackets .)
    close_curly_brackets reduce using rule 33 (scope_start -> open_curly_brackets .)


state 146

    (46) and_condition -> condition and_operator simple_condition .

    close_parenthesise reduce using rule 46 (and_condition -> condition and_operator simple_condition .)
    and_operator    reduce using rule 46 (and_condition -> condition and_operator simple_condition .)
    or_operator     reduce using rule 46 (and_condition -> condition and_operator simple_condition .)


state 147

    (45) or_condition -> condition or_operator simple_condition .

    close_parenthesise reduce using rule 45 (or_condition -> condition or_operator simple_condition .)
    and_operator    reduce using rule 45 (or_condition -> condition or_operator simple_condition .)
    or_operator     reduce using rule 45 (or_condition -> condition or_operator simple_condition .)


state 148

    (48) les_condition -> expression less_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 48 (les_condition -> expression less_operator expression .)
    and_operator    reduce using rule 48 (les_condition -> expression less_operator expression .)
    or_operator     reduce using rule 48 (les_condition -> expression less_operator expression .)
    add_operator    shift and go to state 94
    sub_operator    shift and go to state 95
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98


state 149

    (49) grater_condition -> expression greater_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 49 (grater_condition -> expression greater_operator expression .)
    and_operator    reduce using rule 49 (grater_condition -> expression greater_operator expression .)
    or_operator     reduce using rule 49 (grater_condition -> expression greater_operator expression .)
    add_operator    shift and go to state 94
    sub_operator    shift and go to state 95
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98


state 150

    (50) equality_condition -> expression equality_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 50 (equality_condition -> expression equality_operator expression .)
    and_operator    reduce using rule 50 (equality_condition -> expression equality_operator expression .)
    or_operator     reduce using rule 50 (equality_condition -> expression equality_operator expression .)
    add_operator    shift and go to state 94
    sub_operator    shift and go to state 95
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98


state 151

    (51) not_equals_condition -> expression not_equals_operator expression .
    (82) add_expression -> expression . add_operator expression
    (83) sub_expression -> expression . sub_operator expression
    (84) mul_expression -> expression . mul_operator expression
    (85) dev_expression -> expression . dev_operator expression
    (86) dev_rest_expression -> expression . dev_rest_operator expression

    close_parenthesise reduce using rule 51 (not_equals_condition -> expression not_equals_operator expression .)
    and_operator    reduce using rule 51 (not_equals_condition -> expression not_equals_operator expression .)
    or_operator     reduce using rule 51 (not_equals_condition -> expression not_equals_operator expression .)
    add_operator    shift and go to state 94
    sub_operator    shift and go to state 95
    mul_operator    shift and go to state 96
    dev_operator    shift and go to state 97
    dev_rest_operator shift and go to state 98


state 152

    (55) while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .

    close_curly_brackets reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    read_line       reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    exit            reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    return          reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    if_keyword      reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    while_keyword   reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    int_32_keyword  reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    char_keyword    reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    print           reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    print_array     reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)
    name            reduce using rule 55 (while_statement -> while_keyword open_parenthesise condition close_parenthesise scope .)


state 153

    (52) if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .

    close_curly_brackets reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    read_line       reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    exit            reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    return          reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    if_keyword      reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    while_keyword   reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    int_32_keyword  reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    char_keyword    reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    print           reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    print_array     reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)
    name            reduce using rule 52 (if_statement -> if_keyword open_parenthesise condition close_parenthesise scope else_statement .)


state 154

    (54) else_statement -> else_keyword . scope
    (35) scope -> . scope_start code_block scope_end
    (33) scope_start -> . open_curly_brackets

    open_curly_brackets shift and go to state 145

    scope                          shift and go to state 156
    scope_start                    shift and go to state 144

state 155

    (35) scope -> scope_start code_block . scope_end
    (19) code_block -> code_block . statement
    (34) scope_end -> . close_curly_brackets
    (21) statement -> . basic_block_command semicolon
    (22) statement -> . block
    (23) basic_block_command -> . def_var
    (24) basic_block_command -> . def_array
    (25) basic_block_command -> . int_assignment
    (26) basic_block_command -> . print_statement
    (27) basic_block_command -> . read_line_statement
    (28) basic_block_command -> . exit_statement
    (29) basic_block_command -> . function_call
    (30) basic_block_command -> . return_statement
    (31) block -> . if_statement
    (32) block -> . while_statement
    (58) def_var -> . data_type new_var_name
    (59) def_var -> . data_type new_var_name equals_operator value
    (60) def_array -> . data_type new_var_name open_brackets simple_int_value close_brackets
    (62) int_assignment -> . dest_var equals_operator value
    (94) print_statement -> . print_value_statement
    (95) print_statement -> . print_string_statement
    (96) print_statement -> . print_array_statement
    (93) read_line_statement -> . read_line array_name comma simple_int_value
    (92) exit_statement -> . exit int_expression
    (14) function_call -> . function_name open_parenthesise function_call_parameters close_parenthesise
    (3) return_statement -> . return return_value
    (52) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope else_statement
    (53) if_statement -> . if_keyword open_parenthesise condition close_parenthesise scope
    (55) while_statement -> . while_keyword open_parenthesise condition close_parenthesise scope
    (56) data_type -> . int_32_keyword
    (57) data_type -> . char_keyword
    (66) dest_var -> . var_name
    (67) dest_var -> . array_cell
    (98) print_value_statement -> . print value
    (99) print_string_statement -> . print string
    (97) print_array_statement -> . print_array array_name
    (91) function_name -> . name
    (87) var_name -> . name
    (61) array_cell -> . array_name open_brackets value close_brackets
    (88) array_name -> . name

    close_curly_brackets shift and go to state 158
    read_line       shift and go to state 34
    exit            shift and go to state 36
    return          shift and go to state 38
    if_keyword      shift and go to state 39
    while_keyword   shift and go to state 40
    int_32_keyword  shift and go to state 8
    char_keyword    shift and go to state 9
    print           shift and go to state 43
    print_array     shift and go to state 44
    name            shift and go to state 45

    scope_end                      shift and go to state 157
    statement                      shift and go to state 49
    basic_block_command            shift and go to state 17
    block                          shift and go to state 18
    def_var                        shift and go to state 19
    def_array                      shift and go to state 20
    int_assignment                 shift and go to state 21
    print_statement                shift and go to state 22
    read_line_statement            shift and go to state 23
    exit_statement                 shift and go to state 24
    function_call                  shift and go to state 25
    return_statement               shift and go to state 26
    if_statement                   shift and go to state 27
    while_statement                shift and go to state 28
    data_type                      shift and go to state 29
    dest_var                       shift and go to state 30
    print_value_statement          shift and go to state 31
    print_string_statement         shift and go to state 32
    print_array_statement          shift and go to state 33
    array_name                     shift and go to state 35
    function_name                  shift and go to state 37
    var_name                       shift and go to state 41
    array_cell                     shift and go to state 42

state 156

    (54) else_statement -> else_keyword scope .

    close_curly_brackets reduce using rule 54 (else_statement -> else_keyword scope .)
    read_line       reduce using rule 54 (else_statement -> else_keyword scope .)
    exit            reduce using rule 54 (else_statement -> else_keyword scope .)
    return          reduce using rule 54 (else_statement -> else_keyword scope .)
    if_keyword      reduce using rule 54 (else_statement -> else_keyword scope .)
    while_keyword   reduce using rule 54 (else_statement -> else_keyword scope .)
    int_32_keyword  reduce using rule 54 (else_statement -> else_keyword scope .)
    char_keyword    reduce using rule 54 (else_statement -> else_keyword scope .)
    print           reduce using rule 54 (else_statement -> else_keyword scope .)
    print_array     reduce using rule 54 (else_statement -> else_keyword scope .)
    name            reduce using rule 54 (else_statement -> else_keyword scope .)


state 157

    (35) scope -> scope_start code_block scope_end .

    else_keyword    reduce using rule 35 (scope -> scope_start code_block scope_end .)
    close_curly_brackets reduce using rule 35 (scope -> scope_start code_block scope_end .)
    read_line       reduce using rule 35 (scope -> scope_start code_block scope_end .)
    exit            reduce using rule 35 (scope -> scope_start code_block scope_end .)
    return          reduce using rule 35 (scope -> scope_start code_block scope_end .)
    if_keyword      reduce using rule 35 (scope -> scope_start code_block scope_end .)
    while_keyword   reduce using rule 35 (scope -> scope_start code_block scope_end .)
    int_32_keyword  reduce using rule 35 (scope -> scope_start code_block scope_end .)
    char_keyword    reduce using rule 35 (scope -> scope_start code_block scope_end .)
    print           reduce using rule 35 (scope -> scope_start code_block scope_end .)
    print_array     reduce using rule 35 (scope -> scope_start code_block scope_end .)
    name            reduce using rule 35 (scope -> scope_start code_block scope_end .)


state 158

    (34) scope_end -> close_curly_brackets .

    else_keyword    reduce using rule 34 (scope_end -> close_curly_brackets .)
    close_curly_brackets reduce using rule 34 (scope_end -> close_curly_brackets .)
    read_line       reduce using rule 34 (scope_end -> close_curly_brackets .)
    exit            reduce using rule 34 (scope_end -> close_curly_brackets .)
    return          reduce using rule 34 (scope_end -> close_curly_brackets .)
    if_keyword      reduce using rule 34 (scope_end -> close_curly_brackets .)
    while_keyword   reduce using rule 34 (scope_end -> close_curly_brackets .)
    int_32_keyword  reduce using rule 34 (scope_end -> close_curly_brackets .)
    char_keyword    reduce using rule 34 (scope_end -> close_curly_brackets .)
    print           reduce using rule 34 (scope_end -> close_curly_brackets .)
    print_array     reduce using rule 34 (scope_end -> close_curly_brackets .)
    name            reduce using rule 34 (scope_end -> close_curly_brackets .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for read_line in state 11 resolved as shift
WARNING: shift/reduce conflict for exit in state 11 resolved as shift
WARNING: shift/reduce conflict for return in state 11 resolved as shift
WARNING: shift/reduce conflict for if_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for while_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for int_32_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for char_keyword in state 11 resolved as shift
WARNING: shift/reduce conflict for print in state 11 resolved as shift
WARNING: shift/reduce conflict for print_array in state 11 resolved as shift
WARNING: shift/reduce conflict for name in state 11 resolved as shift
WARNING: shift/reduce conflict for read_line in state 144 resolved as shift
WARNING: shift/reduce conflict for exit in state 144 resolved as shift
WARNING: shift/reduce conflict for return in state 144 resolved as shift
WARNING: shift/reduce conflict for if_keyword in state 144 resolved as shift
WARNING: shift/reduce conflict for while_keyword in state 144 resolved as shift
WARNING: shift/reduce conflict for int_32_keyword in state 144 resolved as shift
WARNING: shift/reduce conflict for char_keyword in state 144 resolved as shift
WARNING: shift/reduce conflict for print in state 144 resolved as shift
WARNING: shift/reduce conflict for print_array in state 144 resolved as shift
WARNING: shift/reduce conflict for name in state 144 resolved as shift
